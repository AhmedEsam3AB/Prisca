
X-Y-Z_plotter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a6e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000ae2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000ad  00800060  00800060  00000ae2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ae2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00000b50  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001980  00000000  00000000  00000ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a52  00000000  00000000  00002620  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000103c  00000000  00000000  00003072  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003c8  00000000  00000000  000040b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006e9  00000000  00000000  00004478  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000013f7  00000000  00000000  00004b61  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00005f58  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	21 e0       	ldi	r18, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	ad 30       	cpi	r26, 0x0D	; 13
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 de 00 	call	0x1bc	; 0x1bc <main>
  74:	0c 94 35 05 	jmp	0xa6a	; 0xa6a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <third_value>:
//***second_value_function***
//this function take one variable, and search in it about the location of ","
//then put the characters after "," in a new array of characters
//then convert string to integer value ,then return it
int third_value (char* String)
{
  7c:	cf 93       	push	r28
  7e:	df 93       	push	r29
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
  84:	c4 56       	subi	r28, 0x64	; 100
  86:	d1 09       	sbc	r29, r1
  88:	0f b6       	in	r0, 0x3f	; 63
  8a:	f8 94       	cli
  8c:	de bf       	out	0x3e, r29	; 62
  8e:	0f be       	out	0x3f, r0	; 63
  90:	cd bf       	out	0x3d, r28	; 61
  92:	ac 01       	movw	r20, r24
  94:	fe 01       	movw	r30, r28
  96:	31 96       	adiw	r30, 0x01	; 1
  98:	9e 01       	movw	r18, r28
  9a:	2b 59       	subi	r18, 0x9B	; 155
  9c:	3f 4f       	sbci	r19, 0xFF	; 255
	int i = 0,j=0;
	char third_v[100];
	for (int i = 0 ; i < 100 ;i++)
	{
		third_v [i] = 0;
  9e:	11 92       	st	Z+, r1
//then convert string to integer value ,then return it
int third_value (char* String)
{
	int i = 0,j=0;
	char third_v[100];
	for (int i = 0 ; i < 100 ;i++)
  a0:	e2 17       	cp	r30, r18
  a2:	f3 07       	cpc	r31, r19
  a4:	e1 f7       	brne	.-8      	; 0x9e <third_value+0x22>
  a6:	60 e0       	ldi	r22, 0x00	; 0
  a8:	70 e0       	ldi	r23, 0x00	; 0
  aa:	20 e0       	ldi	r18, 0x00	; 0
  ac:	30 e0       	ldi	r19, 0x00	; 0
	{
		third_v [i] = 0;
	}
	while(1)
	{
		if (String [i] == '-'){
  ae:	fa 01       	movw	r30, r20
  b0:	e2 0f       	add	r30, r18
  b2:	f3 1f       	adc	r31, r19
  b4:	90 81       	ld	r25, Z
  b6:	9d 32       	cpi	r25, 0x2D	; 45
  b8:	99 f4       	brne	.+38     	; 0xe0 <third_value+0x64>
			third_v [j] = String[j+i+1];
  ba:	f9 01       	movw	r30, r18
  bc:	e6 0f       	add	r30, r22
  be:	f7 1f       	adc	r31, r23
  c0:	e4 0f       	add	r30, r20
  c2:	f5 1f       	adc	r31, r21
  c4:	81 81       	ldd	r24, Z+1	; 0x01
  c6:	a1 e0       	ldi	r26, 0x01	; 1
  c8:	b0 e0       	ldi	r27, 0x00	; 0
  ca:	ac 0f       	add	r26, r28
  cc:	bd 1f       	adc	r27, r29
  ce:	a6 0f       	add	r26, r22
  d0:	b7 1f       	adc	r27, r23
  d2:	8c 93       	st	X, r24
			if (String [j+i+2] == ';')
  d4:	82 81       	ldd	r24, Z+2	; 0x02
  d6:	8b 33       	cpi	r24, 0x3B	; 59
  d8:	31 f0       	breq	.+12     	; 0xe6 <third_value+0x6a>
			break;
			j++;
  da:	6f 5f       	subi	r22, 0xFF	; 255
  dc:	7f 4f       	sbci	r23, 0xFF	; 255
  de:	e7 cf       	rjmp	.-50     	; 0xae <third_value+0x32>
		}
		else
		i++;
  e0:	2f 5f       	subi	r18, 0xFF	; 255
  e2:	3f 4f       	sbci	r19, 0xFF	; 255
  e4:	e4 cf       	rjmp	.-56     	; 0xae <third_value+0x32>
	}
	return (atoi(third_v));
  e6:	ce 01       	movw	r24, r28
  e8:	01 96       	adiw	r24, 0x01	; 1
  ea:	0e 94 0f 05 	call	0xa1e	; 0xa1e <atoi>
}
  ee:	cc 59       	subi	r28, 0x9C	; 156
  f0:	df 4f       	sbci	r29, 0xFF	; 255
  f2:	0f b6       	in	r0, 0x3f	; 63
  f4:	f8 94       	cli
  f6:	de bf       	out	0x3e, r29	; 62
  f8:	0f be       	out	0x3f, r0	; 63
  fa:	cd bf       	out	0x3d, r28	; 61
  fc:	df 91       	pop	r29
  fe:	cf 91       	pop	r28
 100:	08 95       	ret

00000102 <second_value>:

int second_value (char* String)
{
 102:	cf 93       	push	r28
 104:	df 93       	push	r29
 106:	cd b7       	in	r28, 0x3d	; 61
 108:	de b7       	in	r29, 0x3e	; 62
 10a:	c4 56       	subi	r28, 0x64	; 100
 10c:	d1 09       	sbc	r29, r1
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	f8 94       	cli
 112:	de bf       	out	0x3e, r29	; 62
 114:	0f be       	out	0x3f, r0	; 63
 116:	cd bf       	out	0x3d, r28	; 61
 118:	ac 01       	movw	r20, r24
 11a:	fe 01       	movw	r30, r28
 11c:	31 96       	adiw	r30, 0x01	; 1
 11e:	9e 01       	movw	r18, r28
 120:	2b 59       	subi	r18, 0x9B	; 155
 122:	3f 4f       	sbci	r19, 0xFF	; 255
    int i = 0,j=0;
	char second_v[100];
	for (int i = 0 ; i < 100 ;i++)
	{
		second_v [i] = 0;
 124:	11 92       	st	Z+, r1

int second_value (char* String)
{
    int i = 0,j=0;
	char second_v[100];
	for (int i = 0 ; i < 100 ;i++)
 126:	e2 17       	cp	r30, r18
 128:	f3 07       	cpc	r31, r19
 12a:	e1 f7       	brne	.-8      	; 0x124 <second_value+0x22>
 12c:	60 e0       	ldi	r22, 0x00	; 0
 12e:	70 e0       	ldi	r23, 0x00	; 0
 130:	20 e0       	ldi	r18, 0x00	; 0
 132:	30 e0       	ldi	r19, 0x00	; 0
	{
		second_v [i] = 0;
	}
    while(1)
    {
        if (String [i] == ','){
 134:	fa 01       	movw	r30, r20
 136:	e2 0f       	add	r30, r18
 138:	f3 1f       	adc	r31, r19
 13a:	90 81       	ld	r25, Z
 13c:	9c 32       	cpi	r25, 0x2C	; 44
 13e:	99 f4       	brne	.+38     	; 0x166 <second_value+0x64>
				second_v [j] = String[j+i+1];
 140:	f9 01       	movw	r30, r18
 142:	e6 0f       	add	r30, r22
 144:	f7 1f       	adc	r31, r23
 146:	e4 0f       	add	r30, r20
 148:	f5 1f       	adc	r31, r21
 14a:	81 81       	ldd	r24, Z+1	; 0x01
 14c:	a1 e0       	ldi	r26, 0x01	; 1
 14e:	b0 e0       	ldi	r27, 0x00	; 0
 150:	ac 0f       	add	r26, r28
 152:	bd 1f       	adc	r27, r29
 154:	a6 0f       	add	r26, r22
 156:	b7 1f       	adc	r27, r23
 158:	8c 93       	st	X, r24
				if (String [j+i+2] == '-')
 15a:	82 81       	ldd	r24, Z+2	; 0x02
 15c:	8d 32       	cpi	r24, 0x2D	; 45
 15e:	31 f0       	breq	.+12     	; 0x16c <second_value+0x6a>
				break;
				j++;
 160:	6f 5f       	subi	r22, 0xFF	; 255
 162:	7f 4f       	sbci	r23, 0xFF	; 255
 164:	e7 cf       	rjmp	.-50     	; 0x134 <second_value+0x32>
		}
		else
		i++;
 166:	2f 5f       	subi	r18, 0xFF	; 255
 168:	3f 4f       	sbci	r19, 0xFF	; 255
 16a:	e4 cf       	rjmp	.-56     	; 0x134 <second_value+0x32>
    }
    return (atoi(second_v));
 16c:	ce 01       	movw	r24, r28
 16e:	01 96       	adiw	r24, 0x01	; 1
 170:	0e 94 0f 05 	call	0xa1e	; 0xa1e <atoi>
}
 174:	cc 59       	subi	r28, 0x9C	; 156
 176:	df 4f       	sbci	r29, 0xFF	; 255
 178:	0f b6       	in	r0, 0x3f	; 63
 17a:	f8 94       	cli
 17c:	de bf       	out	0x3e, r29	; 62
 17e:	0f be       	out	0x3f, r0	; 63
 180:	cd bf       	out	0x3d, r28	; 61
 182:	df 91       	pop	r29
 184:	cf 91       	pop	r28
 186:	08 95       	ret

00000188 <sub_function>:
//call by reference is used to make a change in it, to save the new value
//this function return a value that the motor have to move
//this value could be negative or positive, it realize the direction of movements
int sub_function (int *current_pos, int new_pos)
{
    int x = new_pos - *current_pos;
 188:	fc 01       	movw	r30, r24
 18a:	20 81       	ld	r18, Z
 18c:	31 81       	ldd	r19, Z+1	; 0x01
    *current_pos = new_pos;
 18e:	71 83       	std	Z+1, r23	; 0x01
 190:	60 83       	st	Z, r22
    return x;
 192:	cb 01       	movw	r24, r22
 194:	82 1b       	sub	r24, r18
 196:	93 0b       	sbc	r25, r19
 198:	08 95       	ret

0000019a <Init>:
		z=0;
	}
}
void Init(void)
{
	StepperInit(16,1000);
 19a:	68 ee       	ldi	r22, 0xE8	; 232
 19c:	73 e0       	ldi	r23, 0x03	; 3
 19e:	80 e1       	ldi	r24, 0x10	; 16
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	0e 94 58 03 	call	0x6b0	; 0x6b0 <StepperInit>
	DDRC |=0XFF;
 1a6:	84 b3       	in	r24, 0x14	; 20
 1a8:	8f ef       	ldi	r24, 0xFF	; 255
 1aa:	84 bb       	out	0x14, r24	; 20
	DDRA |= (1<<PA7);
 1ac:	d7 9a       	sbi	0x1a, 7	; 26
	UART_Init(9600);
 1ae:	60 e8       	ldi	r22, 0x80	; 128
 1b0:	75 e2       	ldi	r23, 0x25	; 37
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	0e 94 a1 04 	call	0x942	; 0x942 <UART_Init>
 1ba:	08 95       	ret

000001bc <main>:
int z;
char String [150]  ;

int main(void)
{
	Init();
 1bc:	0e 94 cd 00 	call	0x19a	; 0x19a <Init>
 1c0:	c9 ed       	ldi	r28, 0xD9	; 217
 1c2:	d0 e0       	ldi	r29, 0x00	; 0
			 
		}
		
		if (x < 0 ){ // if the distance give a negative number make it positive and change the direction of motor rotation
			x *=-1;
			statusx = 1;
 1c4:	01 e0       	ldi	r16, 0x01	; 1
		}
		else
		statusz = 0;
		
		
		Stepper_A_rev(statusx,(x*100));
 1c6:	14 e6       	ldi	r17, 0x64	; 100
 1c8:	e5 e7       	ldi	r30, 0x75	; 117
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
	Init();
	while (1)
	{
		for (int i = 0 ; i < 100 ;i++)
		{
			String [i] = 0;
 1cc:	11 92       	st	Z+, r1
int main(void)
{
	Init();
	while (1)
	{
		for (int i = 0 ; i < 100 ;i++)
 1ce:	ec 17       	cp	r30, r28
 1d0:	fd 07       	cpc	r31, r29
 1d2:	e1 f7       	brne	.-8      	; 0x1cc <main+0x10>
		{
			String [i] = 0;
		}
		UART_RxString(String);
 1d4:	85 e7       	ldi	r24, 0x75	; 117
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0e 94 ad 04 	call	0x95a	; 0x95a <UART_RxString>
		//Recive_Data(String);
		value_1 = atoi(String);           //extract first value
 1dc:	85 e7       	ldi	r24, 0x75	; 117
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	0e 94 0f 05 	call	0xa1e	; 0xa1e <atoi>
 1e4:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <value_1+0x1>
 1e8:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <value_1>
		value_2 = second_value (String); //call function to extract second value
 1ec:	85 e7       	ldi	r24, 0x75	; 117
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	0e 94 81 00 	call	0x102	; 0x102 <second_value>
 1f4:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <value_2+0x1>
 1f8:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <value_2>
		value_3 = third_value (String); //call function to extract third value
 1fc:	85 e7       	ldi	r24, 0x75	; 117
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	0e 94 3e 00 	call	0x7c	; 0x7c <third_value>
 204:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <value_3+0x1>
 208:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <value_3>

		
		if (!(value_1>250||value_2>250||value_3>250||value_1<0||value_2<0||value_3<0)) // if the values don't skip the plate ,use it
 20c:	60 91 6d 00 	lds	r22, 0x006D	; 0x80006d <value_1>
 210:	70 91 6e 00 	lds	r23, 0x006E	; 0x80006e <value_1+0x1>
 214:	6b 3f       	cpi	r22, 0xFB	; 251
 216:	71 05       	cpc	r23, r1
 218:	b0 f5       	brcc	.+108    	; 0x286 <main+0xca>
 21a:	20 91 6b 00 	lds	r18, 0x006B	; 0x80006b <value_2>
 21e:	30 91 6c 00 	lds	r19, 0x006C	; 0x80006c <value_2+0x1>
 222:	2b 3f       	cpi	r18, 0xFB	; 251
 224:	31 05       	cpc	r19, r1
 226:	78 f5       	brcc	.+94     	; 0x286 <main+0xca>
 228:	8b 3f       	cpi	r24, 0xFB	; 251
 22a:	91 05       	cpc	r25, r1
 22c:	60 f5       	brcc	.+88     	; 0x286 <main+0xca>

		{
			x = sub_function (&old_val_1, value_1);     //call function to extract first step
 22e:	84 e6       	ldi	r24, 0x64	; 100
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	0e 94 c4 00 	call	0x188	; 0x188 <sub_function>
 236:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <x+0x1>
 23a:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <x>
			y = sub_function (&old_val_2, value_2);    //call function to extract second step
 23e:	60 91 6b 00 	lds	r22, 0x006B	; 0x80006b <value_2>
 242:	70 91 6c 00 	lds	r23, 0x006C	; 0x80006c <value_2+0x1>
 246:	82 e6       	ldi	r24, 0x62	; 98
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	0e 94 c4 00 	call	0x188	; 0x188 <sub_function>
 24e:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <y+0x1>
 252:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <y>
			z = sub_function (&old_val_3, value_3);    //call function to extract second step
 256:	60 91 71 00 	lds	r22, 0x0071	; 0x800071 <value_3>
 25a:	70 91 72 00 	lds	r23, 0x0072	; 0x800072 <value_3+0x1>
 25e:	80 e6       	ldi	r24, 0x60	; 96
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	0e 94 c4 00 	call	0x188	; 0x188 <sub_function>
 266:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <z+0x1>
 26a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <z>
  			value_1 = 0;
 26e:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <value_1+0x1>
 272:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <value_1>
  			value_2 = 0;
 276:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <value_2+0x1>
 27a:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <value_2>
			value_3 = 0;
 27e:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <value_3+0x1>
 282:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <value_3>
			 
		}
		
		if (x < 0 ){ // if the distance give a negative number make it positive and change the direction of motor rotation
 286:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <x>
 28a:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <x+0x1>
 28e:	99 23       	and	r25, r25
 290:	54 f4       	brge	.+20     	; 0x2a6 <main+0xea>
			x *=-1;
 292:	91 95       	neg	r25
 294:	81 95       	neg	r24
 296:	91 09       	sbc	r25, r1
 298:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <x+0x1>
 29c:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <x>
			statusx = 1;
 2a0:	00 93 68 00 	sts	0x0068, r16	; 0x800068 <statusx>
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <main+0xee>
		}
		else
		statusx = 0;
 2a6:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <statusx>
		if (y < 0 ){
 2aa:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <y>
 2ae:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <y+0x1>
 2b2:	99 23       	and	r25, r25
 2b4:	54 f4       	brge	.+20     	; 0x2ca <main+0x10e>
			y *=-1;
 2b6:	91 95       	neg	r25
 2b8:	81 95       	neg	r24
 2ba:	91 09       	sbc	r25, r1
 2bc:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <y+0x1>
 2c0:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <y>
			statusy = 1;
 2c4:	00 93 67 00 	sts	0x0067, r16	; 0x800067 <statusy>
 2c8:	02 c0       	rjmp	.+4      	; 0x2ce <main+0x112>
		}
		else
		statusy = 0;
 2ca:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <statusy>
		if (z < 0 ){
 2ce:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <z>
 2d2:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <z+0x1>
 2d6:	99 23       	and	r25, r25
 2d8:	54 f4       	brge	.+20     	; 0x2ee <main+0x132>
			z *=-1;
 2da:	91 95       	neg	r25
 2dc:	81 95       	neg	r24
 2de:	91 09       	sbc	r25, r1
 2e0:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <z+0x1>
 2e4:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <z>
			statusz = 1;
 2e8:	00 93 66 00 	sts	0x0066, r16	; 0x800066 <statusz>
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <main+0x136>
		}
		else
		statusz = 0;
 2ee:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <statusz>
		
		
		Stepper_A_rev(statusx,(x*100));
 2f2:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <x>
 2f6:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <x+0x1>
 2fa:	18 9f       	mul	r17, r24
 2fc:	a0 01       	movw	r20, r0
 2fe:	19 9f       	mul	r17, r25
 300:	50 0d       	add	r21, r0
 302:	11 24       	eor	r1, r1
 304:	05 2e       	mov	r0, r21
 306:	00 0c       	add	r0, r0
 308:	66 0b       	sbc	r22, r22
 30a:	77 0b       	sbc	r23, r23
 30c:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <statusx>
 310:	0e 94 dd 03 	call	0x7ba	; 0x7ba <Stepper_A_rev>
		Stepper_B_rev(statusy,(y*100));
 314:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <y>
 318:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <y+0x1>
 31c:	18 9f       	mul	r17, r24
 31e:	a0 01       	movw	r20, r0
 320:	19 9f       	mul	r17, r25
 322:	50 0d       	add	r21, r0
 324:	11 24       	eor	r1, r1
 326:	05 2e       	mov	r0, r21
 328:	00 0c       	add	r0, r0
 32a:	66 0b       	sbc	r22, r22
 32c:	77 0b       	sbc	r23, r23
 32e:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <statusy>
 332:	0e 94 08 04 	call	0x810	; 0x810 <Stepper_B_rev>
		Stepper_C_rev(statusy,(z*100));
 336:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <z>
 33a:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <z+0x1>
 33e:	18 9f       	mul	r17, r24
 340:	a0 01       	movw	r20, r0
 342:	19 9f       	mul	r17, r25
 344:	50 0d       	add	r21, r0
 346:	11 24       	eor	r1, r1
 348:	05 2e       	mov	r0, r21
 34a:	00 0c       	add	r0, r0
 34c:	66 0b       	sbc	r22, r22
 34e:	77 0b       	sbc	r23, r23
 350:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <statusy>
 354:	0e 94 33 04 	call	0x866	; 0x866 <Stepper_C_rev>
		x=0;
 358:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <x+0x1>
 35c:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <x>
		y=0;
 360:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <y+0x1>
 364:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <y>
		z=0;
 368:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <z+0x1>
 36c:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <z>
	}
 370:	2b cf       	rjmp	.-426    	; 0x1c8 <main+0xc>

00000372 <STpinChange>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 372:	67 2b       	or	r22, r23
 374:	09 f0       	breq	.+2      	; 0x378 <STpinChange+0x6>
 376:	9f c0       	rjmp	.+318    	; 0x4b6 <__stack+0x57>
 378:	00 97       	sbiw	r24, 0x00	; 0
 37a:	11 f4       	brne	.+4      	; 0x380 <STpinChange+0xe>
 37c:	d8 98       	cbi	0x1b, 0	; 27
 37e:	08 95       	ret
 380:	81 30       	cpi	r24, 0x01	; 1
 382:	91 05       	cpc	r25, r1
 384:	11 f4       	brne	.+4      	; 0x38a <STpinChange+0x18>
 386:	d9 98       	cbi	0x1b, 1	; 27
 388:	08 95       	ret
 38a:	82 30       	cpi	r24, 0x02	; 2
 38c:	91 05       	cpc	r25, r1
 38e:	11 f4       	brne	.+4      	; 0x394 <STpinChange+0x22>
 390:	da 98       	cbi	0x1b, 2	; 27
 392:	08 95       	ret
 394:	83 30       	cpi	r24, 0x03	; 3
 396:	91 05       	cpc	r25, r1
 398:	11 f4       	brne	.+4      	; 0x39e <STpinChange+0x2c>
 39a:	db 98       	cbi	0x1b, 3	; 27
 39c:	08 95       	ret
 39e:	84 30       	cpi	r24, 0x04	; 4
 3a0:	91 05       	cpc	r25, r1
 3a2:	11 f4       	brne	.+4      	; 0x3a8 <STpinChange+0x36>
 3a4:	dc 98       	cbi	0x1b, 4	; 27
 3a6:	08 95       	ret
 3a8:	85 30       	cpi	r24, 0x05	; 5
 3aa:	91 05       	cpc	r25, r1
 3ac:	11 f4       	brne	.+4      	; 0x3b2 <STpinChange+0x40>
 3ae:	dd 98       	cbi	0x1b, 5	; 27
 3b0:	08 95       	ret
 3b2:	86 30       	cpi	r24, 0x06	; 6
 3b4:	91 05       	cpc	r25, r1
 3b6:	11 f4       	brne	.+4      	; 0x3bc <STpinChange+0x4a>
 3b8:	de 98       	cbi	0x1b, 6	; 27
 3ba:	08 95       	ret
 3bc:	87 30       	cpi	r24, 0x07	; 7
 3be:	91 05       	cpc	r25, r1
 3c0:	11 f4       	brne	.+4      	; 0x3c6 <STpinChange+0x54>
 3c2:	df 98       	cbi	0x1b, 7	; 27
 3c4:	08 95       	ret
 3c6:	8a 30       	cpi	r24, 0x0A	; 10
 3c8:	91 05       	cpc	r25, r1
 3ca:	11 f4       	brne	.+4      	; 0x3d0 <STpinChange+0x5e>
 3cc:	c0 98       	cbi	0x18, 0	; 24
 3ce:	08 95       	ret
 3d0:	8b 30       	cpi	r24, 0x0B	; 11
 3d2:	91 05       	cpc	r25, r1
 3d4:	11 f4       	brne	.+4      	; 0x3da <STpinChange+0x68>
 3d6:	c1 98       	cbi	0x18, 1	; 24
 3d8:	08 95       	ret
 3da:	8c 30       	cpi	r24, 0x0C	; 12
 3dc:	91 05       	cpc	r25, r1
 3de:	11 f4       	brne	.+4      	; 0x3e4 <STpinChange+0x72>
 3e0:	c2 98       	cbi	0x18, 2	; 24
 3e2:	08 95       	ret
 3e4:	8d 30       	cpi	r24, 0x0D	; 13
 3e6:	91 05       	cpc	r25, r1
 3e8:	11 f4       	brne	.+4      	; 0x3ee <STpinChange+0x7c>
 3ea:	c3 98       	cbi	0x18, 3	; 24
 3ec:	08 95       	ret
 3ee:	8e 30       	cpi	r24, 0x0E	; 14
 3f0:	91 05       	cpc	r25, r1
 3f2:	11 f4       	brne	.+4      	; 0x3f8 <STpinChange+0x86>
 3f4:	c4 98       	cbi	0x18, 4	; 24
 3f6:	08 95       	ret
 3f8:	8f 30       	cpi	r24, 0x0F	; 15
 3fa:	91 05       	cpc	r25, r1
 3fc:	11 f4       	brne	.+4      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3fe:	c5 98       	cbi	0x18, 5	; 24
 400:	08 95       	ret
 402:	80 31       	cpi	r24, 0x10	; 16
 404:	91 05       	cpc	r25, r1
 406:	11 f4       	brne	.+4      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 408:	c6 98       	cbi	0x18, 6	; 24
 40a:	08 95       	ret
 40c:	81 31       	cpi	r24, 0x11	; 17
 40e:	91 05       	cpc	r25, r1
 410:	11 f4       	brne	.+4      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 412:	c7 98       	cbi	0x18, 7	; 24
 414:	08 95       	ret
 416:	84 31       	cpi	r24, 0x14	; 20
 418:	91 05       	cpc	r25, r1
 41a:	11 f4       	brne	.+4      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 41c:	a8 98       	cbi	0x15, 0	; 21
 41e:	08 95       	ret
 420:	85 31       	cpi	r24, 0x15	; 21
 422:	91 05       	cpc	r25, r1
 424:	11 f4       	brne	.+4      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 426:	a9 98       	cbi	0x15, 1	; 21
 428:	08 95       	ret
 42a:	86 31       	cpi	r24, 0x16	; 22
 42c:	91 05       	cpc	r25, r1
 42e:	11 f4       	brne	.+4      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 430:	aa 98       	cbi	0x15, 2	; 21
 432:	08 95       	ret
 434:	87 31       	cpi	r24, 0x17	; 23
 436:	91 05       	cpc	r25, r1
 438:	11 f4       	brne	.+4      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 43a:	ab 98       	cbi	0x15, 3	; 21
 43c:	08 95       	ret
 43e:	88 31       	cpi	r24, 0x18	; 24
 440:	91 05       	cpc	r25, r1
 442:	11 f4       	brne	.+4      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 444:	ac 98       	cbi	0x15, 4	; 21
 446:	08 95       	ret
 448:	89 31       	cpi	r24, 0x19	; 25
 44a:	91 05       	cpc	r25, r1
 44c:	11 f4       	brne	.+4      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 44e:	ad 98       	cbi	0x15, 5	; 21
 450:	08 95       	ret
 452:	8a 31       	cpi	r24, 0x1A	; 26
 454:	91 05       	cpc	r25, r1
 456:	11 f4       	brne	.+4      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 458:	ae 98       	cbi	0x15, 6	; 21
 45a:	08 95       	ret
 45c:	8b 31       	cpi	r24, 0x1B	; 27
 45e:	91 05       	cpc	r25, r1
 460:	11 f4       	brne	.+4      	; 0x466 <__stack+0x7>
 462:	af 98       	cbi	0x15, 7	; 21
 464:	08 95       	ret
 466:	8e 31       	cpi	r24, 0x1E	; 30
 468:	91 05       	cpc	r25, r1
 46a:	11 f4       	brne	.+4      	; 0x470 <__stack+0x11>
 46c:	90 98       	cbi	0x12, 0	; 18
 46e:	08 95       	ret
 470:	8f 31       	cpi	r24, 0x1F	; 31
 472:	91 05       	cpc	r25, r1
 474:	11 f4       	brne	.+4      	; 0x47a <__stack+0x1b>
 476:	91 98       	cbi	0x12, 1	; 18
 478:	08 95       	ret
 47a:	80 32       	cpi	r24, 0x20	; 32
 47c:	91 05       	cpc	r25, r1
 47e:	11 f4       	brne	.+4      	; 0x484 <__stack+0x25>
 480:	92 98       	cbi	0x12, 2	; 18
 482:	08 95       	ret
 484:	81 32       	cpi	r24, 0x21	; 33
 486:	91 05       	cpc	r25, r1
 488:	11 f4       	brne	.+4      	; 0x48e <__stack+0x2f>
 48a:	93 98       	cbi	0x12, 3	; 18
 48c:	08 95       	ret
 48e:	82 32       	cpi	r24, 0x22	; 34
 490:	91 05       	cpc	r25, r1
 492:	11 f4       	brne	.+4      	; 0x498 <__stack+0x39>
 494:	94 98       	cbi	0x12, 4	; 18
 496:	08 95       	ret
 498:	83 32       	cpi	r24, 0x23	; 35
 49a:	91 05       	cpc	r25, r1
 49c:	11 f4       	brne	.+4      	; 0x4a2 <__stack+0x43>
 49e:	95 98       	cbi	0x12, 5	; 18
 4a0:	08 95       	ret
 4a2:	84 32       	cpi	r24, 0x24	; 36
 4a4:	91 05       	cpc	r25, r1
 4a6:	11 f4       	brne	.+4      	; 0x4ac <__stack+0x4d>
 4a8:	96 98       	cbi	0x12, 6	; 18
 4aa:	08 95       	ret
 4ac:	85 97       	sbiw	r24, 0x25	; 37
 4ae:	09 f0       	breq	.+2      	; 0x4b2 <__stack+0x53>
 4b0:	9f c0       	rjmp	.+318    	; 0x5f0 <__stack+0x191>
 4b2:	97 98       	cbi	0x12, 7	; 18
 4b4:	08 95       	ret
 4b6:	00 97       	sbiw	r24, 0x00	; 0
 4b8:	11 f4       	brne	.+4      	; 0x4be <__stack+0x5f>
 4ba:	d8 9a       	sbi	0x1b, 0	; 27
 4bc:	08 95       	ret
 4be:	81 30       	cpi	r24, 0x01	; 1
 4c0:	91 05       	cpc	r25, r1
 4c2:	11 f4       	brne	.+4      	; 0x4c8 <__stack+0x69>
 4c4:	d9 9a       	sbi	0x1b, 1	; 27
 4c6:	08 95       	ret
 4c8:	82 30       	cpi	r24, 0x02	; 2
 4ca:	91 05       	cpc	r25, r1
 4cc:	11 f4       	brne	.+4      	; 0x4d2 <__stack+0x73>
 4ce:	da 9a       	sbi	0x1b, 2	; 27
 4d0:	08 95       	ret
 4d2:	83 30       	cpi	r24, 0x03	; 3
 4d4:	91 05       	cpc	r25, r1
 4d6:	11 f4       	brne	.+4      	; 0x4dc <__stack+0x7d>
 4d8:	db 9a       	sbi	0x1b, 3	; 27
 4da:	08 95       	ret
 4dc:	84 30       	cpi	r24, 0x04	; 4
 4de:	91 05       	cpc	r25, r1
 4e0:	11 f4       	brne	.+4      	; 0x4e6 <__stack+0x87>
 4e2:	dc 9a       	sbi	0x1b, 4	; 27
 4e4:	08 95       	ret
 4e6:	85 30       	cpi	r24, 0x05	; 5
 4e8:	91 05       	cpc	r25, r1
 4ea:	11 f4       	brne	.+4      	; 0x4f0 <__stack+0x91>
 4ec:	dd 9a       	sbi	0x1b, 5	; 27
 4ee:	08 95       	ret
 4f0:	86 30       	cpi	r24, 0x06	; 6
 4f2:	91 05       	cpc	r25, r1
 4f4:	11 f4       	brne	.+4      	; 0x4fa <__stack+0x9b>
 4f6:	de 9a       	sbi	0x1b, 6	; 27
 4f8:	08 95       	ret
 4fa:	87 30       	cpi	r24, 0x07	; 7
 4fc:	91 05       	cpc	r25, r1
 4fe:	11 f4       	brne	.+4      	; 0x504 <__stack+0xa5>
 500:	df 9a       	sbi	0x1b, 7	; 27
 502:	08 95       	ret
 504:	8a 30       	cpi	r24, 0x0A	; 10
 506:	91 05       	cpc	r25, r1
 508:	11 f4       	brne	.+4      	; 0x50e <__stack+0xaf>
 50a:	c0 9a       	sbi	0x18, 0	; 24
 50c:	08 95       	ret
 50e:	8b 30       	cpi	r24, 0x0B	; 11
 510:	91 05       	cpc	r25, r1
 512:	11 f4       	brne	.+4      	; 0x518 <__stack+0xb9>
 514:	c1 9a       	sbi	0x18, 1	; 24
 516:	08 95       	ret
 518:	8c 30       	cpi	r24, 0x0C	; 12
 51a:	91 05       	cpc	r25, r1
 51c:	11 f4       	brne	.+4      	; 0x522 <__stack+0xc3>
 51e:	c2 9a       	sbi	0x18, 2	; 24
 520:	08 95       	ret
 522:	8d 30       	cpi	r24, 0x0D	; 13
 524:	91 05       	cpc	r25, r1
 526:	11 f4       	brne	.+4      	; 0x52c <__stack+0xcd>
 528:	c3 9a       	sbi	0x18, 3	; 24
 52a:	08 95       	ret
 52c:	8e 30       	cpi	r24, 0x0E	; 14
 52e:	91 05       	cpc	r25, r1
 530:	11 f4       	brne	.+4      	; 0x536 <__stack+0xd7>
 532:	c4 9a       	sbi	0x18, 4	; 24
 534:	08 95       	ret
 536:	8f 30       	cpi	r24, 0x0F	; 15
 538:	91 05       	cpc	r25, r1
 53a:	11 f4       	brne	.+4      	; 0x540 <__stack+0xe1>
 53c:	c5 9a       	sbi	0x18, 5	; 24
 53e:	08 95       	ret
 540:	80 31       	cpi	r24, 0x10	; 16
 542:	91 05       	cpc	r25, r1
 544:	11 f4       	brne	.+4      	; 0x54a <__stack+0xeb>
 546:	c6 9a       	sbi	0x18, 6	; 24
 548:	08 95       	ret
 54a:	81 31       	cpi	r24, 0x11	; 17
 54c:	91 05       	cpc	r25, r1
 54e:	11 f4       	brne	.+4      	; 0x554 <__stack+0xf5>
 550:	c7 9a       	sbi	0x18, 7	; 24
 552:	08 95       	ret
 554:	84 31       	cpi	r24, 0x14	; 20
 556:	91 05       	cpc	r25, r1
 558:	11 f4       	brne	.+4      	; 0x55e <__stack+0xff>
 55a:	a8 9a       	sbi	0x15, 0	; 21
 55c:	08 95       	ret
 55e:	85 31       	cpi	r24, 0x15	; 21
 560:	91 05       	cpc	r25, r1
 562:	11 f4       	brne	.+4      	; 0x568 <__stack+0x109>
 564:	a9 9a       	sbi	0x15, 1	; 21
 566:	08 95       	ret
 568:	86 31       	cpi	r24, 0x16	; 22
 56a:	91 05       	cpc	r25, r1
 56c:	11 f4       	brne	.+4      	; 0x572 <__stack+0x113>
 56e:	aa 9a       	sbi	0x15, 2	; 21
 570:	08 95       	ret
 572:	87 31       	cpi	r24, 0x17	; 23
 574:	91 05       	cpc	r25, r1
 576:	11 f4       	brne	.+4      	; 0x57c <__stack+0x11d>
 578:	ab 9a       	sbi	0x15, 3	; 21
 57a:	08 95       	ret
 57c:	88 31       	cpi	r24, 0x18	; 24
 57e:	91 05       	cpc	r25, r1
 580:	11 f4       	brne	.+4      	; 0x586 <__stack+0x127>
 582:	ac 9a       	sbi	0x15, 4	; 21
 584:	08 95       	ret
 586:	89 31       	cpi	r24, 0x19	; 25
 588:	91 05       	cpc	r25, r1
 58a:	11 f4       	brne	.+4      	; 0x590 <__stack+0x131>
 58c:	ad 9a       	sbi	0x15, 5	; 21
 58e:	08 95       	ret
 590:	8a 31       	cpi	r24, 0x1A	; 26
 592:	91 05       	cpc	r25, r1
 594:	11 f4       	brne	.+4      	; 0x59a <__stack+0x13b>
 596:	ae 9a       	sbi	0x15, 6	; 21
 598:	08 95       	ret
 59a:	8b 31       	cpi	r24, 0x1B	; 27
 59c:	91 05       	cpc	r25, r1
 59e:	11 f4       	brne	.+4      	; 0x5a4 <__stack+0x145>
 5a0:	af 9a       	sbi	0x15, 7	; 21
 5a2:	08 95       	ret
 5a4:	8e 31       	cpi	r24, 0x1E	; 30
 5a6:	91 05       	cpc	r25, r1
 5a8:	11 f4       	brne	.+4      	; 0x5ae <__stack+0x14f>
 5aa:	90 9a       	sbi	0x12, 0	; 18
 5ac:	08 95       	ret
 5ae:	8f 31       	cpi	r24, 0x1F	; 31
 5b0:	91 05       	cpc	r25, r1
 5b2:	11 f4       	brne	.+4      	; 0x5b8 <__stack+0x159>
 5b4:	91 9a       	sbi	0x12, 1	; 18
 5b6:	08 95       	ret
 5b8:	80 32       	cpi	r24, 0x20	; 32
 5ba:	91 05       	cpc	r25, r1
 5bc:	11 f4       	brne	.+4      	; 0x5c2 <__stack+0x163>
 5be:	92 9a       	sbi	0x12, 2	; 18
 5c0:	08 95       	ret
 5c2:	81 32       	cpi	r24, 0x21	; 33
 5c4:	91 05       	cpc	r25, r1
 5c6:	11 f4       	brne	.+4      	; 0x5cc <__stack+0x16d>
 5c8:	93 9a       	sbi	0x12, 3	; 18
 5ca:	08 95       	ret
 5cc:	82 32       	cpi	r24, 0x22	; 34
 5ce:	91 05       	cpc	r25, r1
 5d0:	11 f4       	brne	.+4      	; 0x5d6 <__stack+0x177>
 5d2:	94 9a       	sbi	0x12, 4	; 18
 5d4:	08 95       	ret
 5d6:	83 32       	cpi	r24, 0x23	; 35
 5d8:	91 05       	cpc	r25, r1
 5da:	11 f4       	brne	.+4      	; 0x5e0 <__stack+0x181>
 5dc:	95 9a       	sbi	0x12, 5	; 18
 5de:	08 95       	ret
 5e0:	84 32       	cpi	r24, 0x24	; 36
 5e2:	91 05       	cpc	r25, r1
 5e4:	11 f4       	brne	.+4      	; 0x5ea <__stack+0x18b>
 5e6:	96 9a       	sbi	0x12, 6	; 18
 5e8:	08 95       	ret
 5ea:	85 97       	sbiw	r24, 0x25	; 37
 5ec:	09 f4       	brne	.+2      	; 0x5f0 <__stack+0x191>
 5ee:	97 9a       	sbi	0x12, 7	; 18
 5f0:	08 95       	ret

000005f2 <steper_1step>:
 5f2:	60 e0       	ldi	r22, 0x00	; 0
 5f4:	70 e0       	ldi	r23, 0x00	; 0
 5f6:	84 e1       	ldi	r24, 0x14	; 20
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	0e 94 b9 01 	call	0x372	; 0x372 <STpinChange>
 5fe:	60 e0       	ldi	r22, 0x00	; 0
 600:	70 e0       	ldi	r23, 0x00	; 0
 602:	85 e1       	ldi	r24, 0x15	; 21
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	0e 94 b9 01 	call	0x372	; 0x372 <STpinChange>
 60a:	60 e0       	ldi	r22, 0x00	; 0
 60c:	70 e0       	ldi	r23, 0x00	; 0
 60e:	86 e1       	ldi	r24, 0x16	; 22
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	0e 94 b9 01 	call	0x372	; 0x372 <STpinChange>
 616:	08 95       	ret

00000618 <steper_Hstep>:
 618:	61 e0       	ldi	r22, 0x01	; 1
 61a:	70 e0       	ldi	r23, 0x00	; 0
 61c:	84 e1       	ldi	r24, 0x14	; 20
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	0e 94 b9 01 	call	0x372	; 0x372 <STpinChange>
 624:	60 e0       	ldi	r22, 0x00	; 0
 626:	70 e0       	ldi	r23, 0x00	; 0
 628:	85 e1       	ldi	r24, 0x15	; 21
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	0e 94 b9 01 	call	0x372	; 0x372 <STpinChange>
 630:	60 e0       	ldi	r22, 0x00	; 0
 632:	70 e0       	ldi	r23, 0x00	; 0
 634:	86 e1       	ldi	r24, 0x16	; 22
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	0e 94 b9 01 	call	0x372	; 0x372 <STpinChange>
 63c:	08 95       	ret

0000063e <steper_Qstep>:
 63e:	60 e0       	ldi	r22, 0x00	; 0
 640:	70 e0       	ldi	r23, 0x00	; 0
 642:	84 e1       	ldi	r24, 0x14	; 20
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	0e 94 b9 01 	call	0x372	; 0x372 <STpinChange>
 64a:	61 e0       	ldi	r22, 0x01	; 1
 64c:	70 e0       	ldi	r23, 0x00	; 0
 64e:	85 e1       	ldi	r24, 0x15	; 21
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	0e 94 b9 01 	call	0x372	; 0x372 <STpinChange>
 656:	60 e0       	ldi	r22, 0x00	; 0
 658:	70 e0       	ldi	r23, 0x00	; 0
 65a:	86 e1       	ldi	r24, 0x16	; 22
 65c:	90 e0       	ldi	r25, 0x00	; 0
 65e:	0e 94 b9 01 	call	0x372	; 0x372 <STpinChange>
 662:	08 95       	ret

00000664 <steper_Estep>:
 664:	61 e0       	ldi	r22, 0x01	; 1
 666:	70 e0       	ldi	r23, 0x00	; 0
 668:	84 e1       	ldi	r24, 0x14	; 20
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	0e 94 b9 01 	call	0x372	; 0x372 <STpinChange>
 670:	61 e0       	ldi	r22, 0x01	; 1
 672:	70 e0       	ldi	r23, 0x00	; 0
 674:	85 e1       	ldi	r24, 0x15	; 21
 676:	90 e0       	ldi	r25, 0x00	; 0
 678:	0e 94 b9 01 	call	0x372	; 0x372 <STpinChange>
 67c:	60 e0       	ldi	r22, 0x00	; 0
 67e:	70 e0       	ldi	r23, 0x00	; 0
 680:	86 e1       	ldi	r24, 0x16	; 22
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	0e 94 b9 01 	call	0x372	; 0x372 <STpinChange>
 688:	08 95       	ret

0000068a <steper_Sstep>:
 68a:	61 e0       	ldi	r22, 0x01	; 1
 68c:	70 e0       	ldi	r23, 0x00	; 0
 68e:	84 e1       	ldi	r24, 0x14	; 20
 690:	90 e0       	ldi	r25, 0x00	; 0
 692:	0e 94 b9 01 	call	0x372	; 0x372 <STpinChange>
 696:	61 e0       	ldi	r22, 0x01	; 1
 698:	70 e0       	ldi	r23, 0x00	; 0
 69a:	85 e1       	ldi	r24, 0x15	; 21
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	0e 94 b9 01 	call	0x372	; 0x372 <STpinChange>
 6a2:	61 e0       	ldi	r22, 0x01	; 1
 6a4:	70 e0       	ldi	r23, 0x00	; 0
 6a6:	86 e1       	ldi	r24, 0x16	; 22
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	0e 94 b9 01 	call	0x372	; 0x372 <STpinChange>
 6ae:	08 95       	ret

000006b0 <StepperInit>:
 6b0:	cf 93       	push	r28
 6b2:	df 93       	push	r29
 6b4:	eb 01       	movw	r28, r22
 6b6:	86 30       	cpi	r24, 0x06	; 6
 6b8:	91 05       	cpc	r25, r1
 6ba:	99 f0       	breq	.+38     	; 0x6e2 <StepperInit+0x32>
 6bc:	34 f4       	brge	.+12     	; 0x6ca <StepperInit+0x1a>
 6be:	81 30       	cpi	r24, 0x01	; 1
 6c0:	91 05       	cpc	r25, r1
 6c2:	49 f0       	breq	.+18     	; 0x6d6 <StepperInit+0x26>
 6c4:	02 97       	sbiw	r24, 0x02	; 2
 6c6:	51 f0       	breq	.+20     	; 0x6dc <StepperInit+0x2c>
 6c8:	14 c0       	rjmp	.+40     	; 0x6f2 <StepperInit+0x42>
 6ca:	88 30       	cpi	r24, 0x08	; 8
 6cc:	91 05       	cpc	r25, r1
 6ce:	61 f0       	breq	.+24     	; 0x6e8 <StepperInit+0x38>
 6d0:	40 97       	sbiw	r24, 0x10	; 16
 6d2:	69 f0       	breq	.+26     	; 0x6ee <StepperInit+0x3e>
 6d4:	0e c0       	rjmp	.+28     	; 0x6f2 <StepperInit+0x42>
 6d6:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <steper_1step>
 6da:	0b c0       	rjmp	.+22     	; 0x6f2 <StepperInit+0x42>
 6dc:	0e 94 0c 03 	call	0x618	; 0x618 <steper_Hstep>
 6e0:	08 c0       	rjmp	.+16     	; 0x6f2 <StepperInit+0x42>
 6e2:	0e 94 1f 03 	call	0x63e	; 0x63e <steper_Qstep>
 6e6:	05 c0       	rjmp	.+10     	; 0x6f2 <StepperInit+0x42>
 6e8:	0e 94 32 03 	call	0x664	; 0x664 <steper_Estep>
 6ec:	02 c0       	rjmp	.+4      	; 0x6f2 <StepperInit+0x42>
 6ee:	0e 94 45 03 	call	0x68a	; 0x68a <steper_Sstep>
 6f2:	d0 93 0c 01 	sts	0x010C, r29	; 0x80010c <speed+0x1>
 6f6:	c0 93 0b 01 	sts	0x010B, r28	; 0x80010b <speed>
 6fa:	df 91       	pop	r29
 6fc:	cf 91       	pop	r28
 6fe:	08 95       	ret

00000700 <setspeed>:
 700:	bc 01       	movw	r22, r24
 702:	88 ee       	ldi	r24, 0xE8	; 232
 704:	93 e0       	ldi	r25, 0x03	; 3
 706:	0e 94 c5 04 	call	0x98a	; 0x98a <__divmodhi4>
 70a:	16 16       	cp	r1, r22
 70c:	17 06       	cpc	r1, r23
 70e:	4c f4       	brge	.+18     	; 0x722 <setspeed+0x22>
 710:	8f ec       	ldi	r24, 0xCF	; 207
 712:	97 e0       	ldi	r25, 0x07	; 7
 714:	01 97       	sbiw	r24, 0x01	; 1
 716:	f1 f7       	brne	.-4      	; 0x714 <setspeed+0x14>
 718:	00 c0       	rjmp	.+0      	; 0x71a <setspeed+0x1a>
 71a:	00 00       	nop
 71c:	61 50       	subi	r22, 0x01	; 1
 71e:	71 09       	sbc	r23, r1
 720:	b9 f7       	brne	.-18     	; 0x710 <setspeed+0x10>
 722:	08 95       	ret

00000724 <Stepper_A_onerev>:
 724:	61 e0       	ldi	r22, 0x01	; 1
 726:	70 e0       	ldi	r23, 0x00	; 0
 728:	88 e1       	ldi	r24, 0x18	; 24
 72a:	90 e0       	ldi	r25, 0x00	; 0
 72c:	0e 94 b9 01 	call	0x372	; 0x372 <STpinChange>
 730:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <speed>
 734:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <speed+0x1>
 738:	0e 94 80 03 	call	0x700	; 0x700 <setspeed>
 73c:	60 e0       	ldi	r22, 0x00	; 0
 73e:	70 e0       	ldi	r23, 0x00	; 0
 740:	88 e1       	ldi	r24, 0x18	; 24
 742:	90 e0       	ldi	r25, 0x00	; 0
 744:	0e 94 b9 01 	call	0x372	; 0x372 <STpinChange>
 748:	87 ec       	ldi	r24, 0xC7	; 199
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	01 97       	sbiw	r24, 0x01	; 1
 74e:	f1 f7       	brne	.-4      	; 0x74c <Stepper_A_onerev+0x28>
 750:	00 c0       	rjmp	.+0      	; 0x752 <Stepper_A_onerev+0x2e>
 752:	00 00       	nop
 754:	08 95       	ret

00000756 <Stepper_B_onerev>:
 756:	61 e0       	ldi	r22, 0x01	; 1
 758:	70 e0       	ldi	r23, 0x00	; 0
 75a:	89 e1       	ldi	r24, 0x19	; 25
 75c:	90 e0       	ldi	r25, 0x00	; 0
 75e:	0e 94 b9 01 	call	0x372	; 0x372 <STpinChange>
 762:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <speed>
 766:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <speed+0x1>
 76a:	0e 94 80 03 	call	0x700	; 0x700 <setspeed>
 76e:	60 e0       	ldi	r22, 0x00	; 0
 770:	70 e0       	ldi	r23, 0x00	; 0
 772:	89 e1       	ldi	r24, 0x19	; 25
 774:	90 e0       	ldi	r25, 0x00	; 0
 776:	0e 94 b9 01 	call	0x372	; 0x372 <STpinChange>
 77a:	87 ec       	ldi	r24, 0xC7	; 199
 77c:	90 e0       	ldi	r25, 0x00	; 0
 77e:	01 97       	sbiw	r24, 0x01	; 1
 780:	f1 f7       	brne	.-4      	; 0x77e <Stepper_B_onerev+0x28>
 782:	00 c0       	rjmp	.+0      	; 0x784 <Stepper_B_onerev+0x2e>
 784:	00 00       	nop
 786:	08 95       	ret

00000788 <Stepper_C_onerev>:
 788:	61 e0       	ldi	r22, 0x01	; 1
 78a:	70 e0       	ldi	r23, 0x00	; 0
 78c:	8b e1       	ldi	r24, 0x1B	; 27
 78e:	90 e0       	ldi	r25, 0x00	; 0
 790:	0e 94 b9 01 	call	0x372	; 0x372 <STpinChange>
 794:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <speed>
 798:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <speed+0x1>
 79c:	0e 94 80 03 	call	0x700	; 0x700 <setspeed>
 7a0:	60 e0       	ldi	r22, 0x00	; 0
 7a2:	70 e0       	ldi	r23, 0x00	; 0
 7a4:	8b e1       	ldi	r24, 0x1B	; 27
 7a6:	90 e0       	ldi	r25, 0x00	; 0
 7a8:	0e 94 b9 01 	call	0x372	; 0x372 <STpinChange>
 7ac:	87 ec       	ldi	r24, 0xC7	; 199
 7ae:	90 e0       	ldi	r25, 0x00	; 0
 7b0:	01 97       	sbiw	r24, 0x01	; 1
 7b2:	f1 f7       	brne	.-4      	; 0x7b0 <Stepper_C_onerev+0x28>
 7b4:	00 c0       	rjmp	.+0      	; 0x7b6 <Stepper_C_onerev+0x2e>
 7b6:	00 00       	nop
 7b8:	08 95       	ret

000007ba <Stepper_A_rev>:
 7ba:	cf 92       	push	r12
 7bc:	df 92       	push	r13
 7be:	ef 92       	push	r14
 7c0:	ff 92       	push	r15
 7c2:	cf 93       	push	r28
 7c4:	c8 2f       	mov	r28, r24
 7c6:	6a 01       	movw	r12, r20
 7c8:	7b 01       	movw	r14, r22
 7ca:	88 23       	and	r24, r24
 7cc:	39 f0       	breq	.+14     	; 0x7dc <Stepper_A_rev+0x22>
 7ce:	61 e0       	ldi	r22, 0x01	; 1
 7d0:	70 e0       	ldi	r23, 0x00	; 0
 7d2:	87 e1       	ldi	r24, 0x17	; 23
 7d4:	90 e0       	ldi	r25, 0x00	; 0
 7d6:	0e 94 b9 01 	call	0x372	; 0x372 <STpinChange>
 7da:	06 c0       	rjmp	.+12     	; 0x7e8 <Stepper_A_rev+0x2e>
 7dc:	60 e0       	ldi	r22, 0x00	; 0
 7de:	70 e0       	ldi	r23, 0x00	; 0
 7e0:	87 e1       	ldi	r24, 0x17	; 23
 7e2:	90 e0       	ldi	r25, 0x00	; 0
 7e4:	0e 94 b9 01 	call	0x372	; 0x372 <STpinChange>
 7e8:	1c 14       	cp	r1, r12
 7ea:	1d 04       	cpc	r1, r13
 7ec:	1e 04       	cpc	r1, r14
 7ee:	1f 04       	cpc	r1, r15
 7f0:	4c f4       	brge	.+18     	; 0x804 <Stepper_A_rev+0x4a>
 7f2:	8c 2f       	mov	r24, r28
 7f4:	0e 94 92 03 	call	0x724	; 0x724 <Stepper_A_onerev>
 7f8:	81 e0       	ldi	r24, 0x01	; 1
 7fa:	c8 1a       	sub	r12, r24
 7fc:	d1 08       	sbc	r13, r1
 7fe:	e1 08       	sbc	r14, r1
 800:	f1 08       	sbc	r15, r1
 802:	b9 f7       	brne	.-18     	; 0x7f2 <Stepper_A_rev+0x38>
 804:	cf 91       	pop	r28
 806:	ff 90       	pop	r15
 808:	ef 90       	pop	r14
 80a:	df 90       	pop	r13
 80c:	cf 90       	pop	r12
 80e:	08 95       	ret

00000810 <Stepper_B_rev>:
 810:	cf 92       	push	r12
 812:	df 92       	push	r13
 814:	ef 92       	push	r14
 816:	ff 92       	push	r15
 818:	cf 93       	push	r28
 81a:	c8 2f       	mov	r28, r24
 81c:	6a 01       	movw	r12, r20
 81e:	7b 01       	movw	r14, r22
 820:	88 23       	and	r24, r24
 822:	39 f0       	breq	.+14     	; 0x832 <Stepper_B_rev+0x22>
 824:	61 e0       	ldi	r22, 0x01	; 1
 826:	70 e0       	ldi	r23, 0x00	; 0
 828:	8a e1       	ldi	r24, 0x1A	; 26
 82a:	90 e0       	ldi	r25, 0x00	; 0
 82c:	0e 94 b9 01 	call	0x372	; 0x372 <STpinChange>
 830:	06 c0       	rjmp	.+12     	; 0x83e <Stepper_B_rev+0x2e>
 832:	60 e0       	ldi	r22, 0x00	; 0
 834:	70 e0       	ldi	r23, 0x00	; 0
 836:	8a e1       	ldi	r24, 0x1A	; 26
 838:	90 e0       	ldi	r25, 0x00	; 0
 83a:	0e 94 b9 01 	call	0x372	; 0x372 <STpinChange>
 83e:	1c 14       	cp	r1, r12
 840:	1d 04       	cpc	r1, r13
 842:	1e 04       	cpc	r1, r14
 844:	1f 04       	cpc	r1, r15
 846:	4c f4       	brge	.+18     	; 0x85a <Stepper_B_rev+0x4a>
 848:	8c 2f       	mov	r24, r28
 84a:	0e 94 ab 03 	call	0x756	; 0x756 <Stepper_B_onerev>
 84e:	81 e0       	ldi	r24, 0x01	; 1
 850:	c8 1a       	sub	r12, r24
 852:	d1 08       	sbc	r13, r1
 854:	e1 08       	sbc	r14, r1
 856:	f1 08       	sbc	r15, r1
 858:	b9 f7       	brne	.-18     	; 0x848 <Stepper_B_rev+0x38>
 85a:	cf 91       	pop	r28
 85c:	ff 90       	pop	r15
 85e:	ef 90       	pop	r14
 860:	df 90       	pop	r13
 862:	cf 90       	pop	r12
 864:	08 95       	ret

00000866 <Stepper_C_rev>:
 866:	cf 92       	push	r12
 868:	df 92       	push	r13
 86a:	ef 92       	push	r14
 86c:	ff 92       	push	r15
 86e:	cf 93       	push	r28
 870:	c8 2f       	mov	r28, r24
 872:	6a 01       	movw	r12, r20
 874:	7b 01       	movw	r14, r22
 876:	88 23       	and	r24, r24
 878:	39 f0       	breq	.+14     	; 0x888 <Stepper_C_rev+0x22>
 87a:	61 e0       	ldi	r22, 0x01	; 1
 87c:	70 e0       	ldi	r23, 0x00	; 0
 87e:	80 e0       	ldi	r24, 0x00	; 0
 880:	90 e0       	ldi	r25, 0x00	; 0
 882:	0e 94 b9 01 	call	0x372	; 0x372 <STpinChange>
 886:	06 c0       	rjmp	.+12     	; 0x894 <Stepper_C_rev+0x2e>
 888:	60 e0       	ldi	r22, 0x00	; 0
 88a:	70 e0       	ldi	r23, 0x00	; 0
 88c:	80 e0       	ldi	r24, 0x00	; 0
 88e:	90 e0       	ldi	r25, 0x00	; 0
 890:	0e 94 b9 01 	call	0x372	; 0x372 <STpinChange>
 894:	1c 14       	cp	r1, r12
 896:	1d 04       	cpc	r1, r13
 898:	1e 04       	cpc	r1, r14
 89a:	1f 04       	cpc	r1, r15
 89c:	4c f4       	brge	.+18     	; 0x8b0 <Stepper_C_rev+0x4a>
 89e:	8c 2f       	mov	r24, r28
 8a0:	0e 94 c4 03 	call	0x788	; 0x788 <Stepper_C_onerev>
 8a4:	81 e0       	ldi	r24, 0x01	; 1
 8a6:	c8 1a       	sub	r12, r24
 8a8:	d1 08       	sbc	r13, r1
 8aa:	e1 08       	sbc	r14, r1
 8ac:	f1 08       	sbc	r15, r1
 8ae:	b9 f7       	brne	.-18     	; 0x89e <Stepper_C_rev+0x38>
 8b0:	cf 91       	pop	r28
 8b2:	ff 90       	pop	r15
 8b4:	ef 90       	pop	r14
 8b6:	df 90       	pop	r13
 8b8:	cf 90       	pop	r12
 8ba:	08 95       	ret

000008bc <UART_SetBaudRate>:
 8bc:	0f 93       	push	r16
 8be:	1f 93       	push	r17
 8c0:	8b 01       	movw	r16, r22
 8c2:	9c 01       	movw	r18, r24
 8c4:	dc 01       	movw	r26, r24
 8c6:	cb 01       	movw	r24, r22
 8c8:	80 56       	subi	r24, 0x60	; 96
 8ca:	99 40       	sbci	r25, 0x09	; 9
 8cc:	a1 09       	sbc	r26, r1
 8ce:	b1 09       	sbc	r27, r1
 8d0:	81 3a       	cpi	r24, 0xA1	; 161
 8d2:	98 4b       	sbci	r25, 0xB8	; 184
 8d4:	a1 40       	sbci	r26, 0x01	; 1
 8d6:	b1 05       	cpc	r27, r1
 8d8:	68 f5       	brcc	.+90     	; 0x934 <UART_SetBaudRate+0x78>
 8da:	80 e0       	ldi	r24, 0x00	; 0
 8dc:	90 e0       	ldi	r25, 0x00	; 0
 8de:	dc 01       	movw	r26, r24
 8e0:	80 1b       	sub	r24, r16
 8e2:	91 0b       	sbc	r25, r17
 8e4:	a2 0b       	sbc	r26, r18
 8e6:	b3 0b       	sbc	r27, r19
 8e8:	88 0f       	add	r24, r24
 8ea:	99 1f       	adc	r25, r25
 8ec:	aa 1f       	adc	r26, r26
 8ee:	bb 1f       	adc	r27, r27
 8f0:	88 0f       	add	r24, r24
 8f2:	99 1f       	adc	r25, r25
 8f4:	aa 1f       	adc	r26, r26
 8f6:	bb 1f       	adc	r27, r27
 8f8:	88 0f       	add	r24, r24
 8fa:	99 1f       	adc	r25, r25
 8fc:	aa 1f       	adc	r26, r26
 8fe:	bb 1f       	adc	r27, r27
 900:	bc 01       	movw	r22, r24
 902:	cd 01       	movw	r24, r26
 904:	7c 5d       	subi	r23, 0xDC	; 220
 906:	8b 40       	sbci	r24, 0x0B	; 11
 908:	9f 4f       	sbci	r25, 0xFF	; 255
 90a:	00 0f       	add	r16, r16
 90c:	11 1f       	adc	r17, r17
 90e:	22 1f       	adc	r18, r18
 910:	33 1f       	adc	r19, r19
 912:	00 0f       	add	r16, r16
 914:	11 1f       	adc	r17, r17
 916:	22 1f       	adc	r18, r18
 918:	33 1f       	adc	r19, r19
 91a:	a9 01       	movw	r20, r18
 91c:	98 01       	movw	r18, r16
 91e:	22 0f       	add	r18, r18
 920:	33 1f       	adc	r19, r19
 922:	44 1f       	adc	r20, r20
 924:	55 1f       	adc	r21, r21
 926:	22 0f       	add	r18, r18
 928:	33 1f       	adc	r19, r19
 92a:	44 1f       	adc	r20, r20
 92c:	55 1f       	adc	r21, r21
 92e:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__udivmodsi4>
 932:	02 c0       	rjmp	.+4      	; 0x938 <UART_SetBaudRate+0x7c>
 934:	27 e6       	ldi	r18, 0x67	; 103
 936:	30 e0       	ldi	r19, 0x00	; 0
 938:	29 b9       	out	0x09, r18	; 9
 93a:	30 bd       	out	0x20, r19	; 32
 93c:	1f 91       	pop	r17
 93e:	0f 91       	pop	r16
 940:	08 95       	ret

00000942 <UART_Init>:
 942:	28 e1       	ldi	r18, 0x18	; 24
 944:	2a b9       	out	0x0a, r18	; 10
 946:	26 e8       	ldi	r18, 0x86	; 134
 948:	20 bd       	out	0x20, r18	; 32
 94a:	1b b8       	out	0x0b, r1	; 11
 94c:	0e 94 5e 04 	call	0x8bc	; 0x8bc <UART_SetBaudRate>
 950:	08 95       	ret

00000952 <UART_RxChar>:
 952:	5f 9b       	sbis	0x0b, 7	; 11
 954:	fe cf       	rjmp	.-4      	; 0x952 <UART_RxChar>
 956:	8c b1       	in	r24, 0x0c	; 12
 958:	08 95       	ret

0000095a <UART_RxString>:
 95a:	0f 93       	push	r16
 95c:	1f 93       	push	r17
 95e:	cf 93       	push	r28
 960:	8c 01       	movw	r16, r24
 962:	c0 e0       	ldi	r28, 0x00	; 0
 964:	0e 94 a9 04 	call	0x952	; 0x952 <UART_RxChar>
 968:	8b 33       	cpi	r24, 0x3B	; 59
 96a:	29 f4       	brne	.+10     	; 0x976 <UART_RxString+0x1c>
 96c:	f8 01       	movw	r30, r16
 96e:	ec 0f       	add	r30, r28
 970:	f1 1d       	adc	r31, r1
 972:	80 83       	st	Z, r24
 974:	06 c0       	rjmp	.+12     	; 0x982 <UART_RxString+0x28>
 976:	f8 01       	movw	r30, r16
 978:	ec 0f       	add	r30, r28
 97a:	f1 1d       	adc	r31, r1
 97c:	80 83       	st	Z, r24
 97e:	cf 5f       	subi	r28, 0xFF	; 255
 980:	f1 cf       	rjmp	.-30     	; 0x964 <UART_RxString+0xa>
 982:	cf 91       	pop	r28
 984:	1f 91       	pop	r17
 986:	0f 91       	pop	r16
 988:	08 95       	ret

0000098a <__divmodhi4>:
 98a:	97 fb       	bst	r25, 7
 98c:	07 2e       	mov	r0, r23
 98e:	16 f4       	brtc	.+4      	; 0x994 <__divmodhi4+0xa>
 990:	00 94       	com	r0
 992:	07 d0       	rcall	.+14     	; 0x9a2 <__divmodhi4_neg1>
 994:	77 fd       	sbrc	r23, 7
 996:	09 d0       	rcall	.+18     	; 0x9aa <__divmodhi4_neg2>
 998:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <__udivmodhi4>
 99c:	07 fc       	sbrc	r0, 7
 99e:	05 d0       	rcall	.+10     	; 0x9aa <__divmodhi4_neg2>
 9a0:	3e f4       	brtc	.+14     	; 0x9b0 <__divmodhi4_exit>

000009a2 <__divmodhi4_neg1>:
 9a2:	90 95       	com	r25
 9a4:	81 95       	neg	r24
 9a6:	9f 4f       	sbci	r25, 0xFF	; 255
 9a8:	08 95       	ret

000009aa <__divmodhi4_neg2>:
 9aa:	70 95       	com	r23
 9ac:	61 95       	neg	r22
 9ae:	7f 4f       	sbci	r23, 0xFF	; 255

000009b0 <__divmodhi4_exit>:
 9b0:	08 95       	ret

000009b2 <__udivmodsi4>:
 9b2:	a1 e2       	ldi	r26, 0x21	; 33
 9b4:	1a 2e       	mov	r1, r26
 9b6:	aa 1b       	sub	r26, r26
 9b8:	bb 1b       	sub	r27, r27
 9ba:	fd 01       	movw	r30, r26
 9bc:	0d c0       	rjmp	.+26     	; 0x9d8 <__udivmodsi4_ep>

000009be <__udivmodsi4_loop>:
 9be:	aa 1f       	adc	r26, r26
 9c0:	bb 1f       	adc	r27, r27
 9c2:	ee 1f       	adc	r30, r30
 9c4:	ff 1f       	adc	r31, r31
 9c6:	a2 17       	cp	r26, r18
 9c8:	b3 07       	cpc	r27, r19
 9ca:	e4 07       	cpc	r30, r20
 9cc:	f5 07       	cpc	r31, r21
 9ce:	20 f0       	brcs	.+8      	; 0x9d8 <__udivmodsi4_ep>
 9d0:	a2 1b       	sub	r26, r18
 9d2:	b3 0b       	sbc	r27, r19
 9d4:	e4 0b       	sbc	r30, r20
 9d6:	f5 0b       	sbc	r31, r21

000009d8 <__udivmodsi4_ep>:
 9d8:	66 1f       	adc	r22, r22
 9da:	77 1f       	adc	r23, r23
 9dc:	88 1f       	adc	r24, r24
 9de:	99 1f       	adc	r25, r25
 9e0:	1a 94       	dec	r1
 9e2:	69 f7       	brne	.-38     	; 0x9be <__udivmodsi4_loop>
 9e4:	60 95       	com	r22
 9e6:	70 95       	com	r23
 9e8:	80 95       	com	r24
 9ea:	90 95       	com	r25
 9ec:	9b 01       	movw	r18, r22
 9ee:	ac 01       	movw	r20, r24
 9f0:	bd 01       	movw	r22, r26
 9f2:	cf 01       	movw	r24, r30
 9f4:	08 95       	ret

000009f6 <__udivmodhi4>:
 9f6:	aa 1b       	sub	r26, r26
 9f8:	bb 1b       	sub	r27, r27
 9fa:	51 e1       	ldi	r21, 0x11	; 17
 9fc:	07 c0       	rjmp	.+14     	; 0xa0c <__udivmodhi4_ep>

000009fe <__udivmodhi4_loop>:
 9fe:	aa 1f       	adc	r26, r26
 a00:	bb 1f       	adc	r27, r27
 a02:	a6 17       	cp	r26, r22
 a04:	b7 07       	cpc	r27, r23
 a06:	10 f0       	brcs	.+4      	; 0xa0c <__udivmodhi4_ep>
 a08:	a6 1b       	sub	r26, r22
 a0a:	b7 0b       	sbc	r27, r23

00000a0c <__udivmodhi4_ep>:
 a0c:	88 1f       	adc	r24, r24
 a0e:	99 1f       	adc	r25, r25
 a10:	5a 95       	dec	r21
 a12:	a9 f7       	brne	.-22     	; 0x9fe <__udivmodhi4_loop>
 a14:	80 95       	com	r24
 a16:	90 95       	com	r25
 a18:	bc 01       	movw	r22, r24
 a1a:	cd 01       	movw	r24, r26
 a1c:	08 95       	ret

00000a1e <atoi>:
 a1e:	fc 01       	movw	r30, r24
 a20:	88 27       	eor	r24, r24
 a22:	99 27       	eor	r25, r25
 a24:	e8 94       	clt
 a26:	21 91       	ld	r18, Z+
 a28:	20 32       	cpi	r18, 0x20	; 32
 a2a:	e9 f3       	breq	.-6      	; 0xa26 <atoi+0x8>
 a2c:	29 30       	cpi	r18, 0x09	; 9
 a2e:	10 f0       	brcs	.+4      	; 0xa34 <atoi+0x16>
 a30:	2e 30       	cpi	r18, 0x0E	; 14
 a32:	c8 f3       	brcs	.-14     	; 0xa26 <atoi+0x8>
 a34:	2b 32       	cpi	r18, 0x2B	; 43
 a36:	41 f0       	breq	.+16     	; 0xa48 <atoi+0x2a>
 a38:	2d 32       	cpi	r18, 0x2D	; 45
 a3a:	39 f4       	brne	.+14     	; 0xa4a <atoi+0x2c>
 a3c:	68 94       	set
 a3e:	04 c0       	rjmp	.+8      	; 0xa48 <atoi+0x2a>
 a40:	0e 94 2d 05 	call	0xa5a	; 0xa5a <__mulhi_const_10>
 a44:	82 0f       	add	r24, r18
 a46:	91 1d       	adc	r25, r1
 a48:	21 91       	ld	r18, Z+
 a4a:	20 53       	subi	r18, 0x30	; 48
 a4c:	2a 30       	cpi	r18, 0x0A	; 10
 a4e:	c0 f3       	brcs	.-16     	; 0xa40 <atoi+0x22>
 a50:	1e f4       	brtc	.+6      	; 0xa58 <atoi+0x3a>
 a52:	90 95       	com	r25
 a54:	81 95       	neg	r24
 a56:	9f 4f       	sbci	r25, 0xFF	; 255
 a58:	08 95       	ret

00000a5a <__mulhi_const_10>:
 a5a:	7a e0       	ldi	r23, 0x0A	; 10
 a5c:	97 9f       	mul	r25, r23
 a5e:	90 2d       	mov	r25, r0
 a60:	87 9f       	mul	r24, r23
 a62:	80 2d       	mov	r24, r0
 a64:	91 0d       	add	r25, r1
 a66:	11 24       	eor	r1, r1
 a68:	08 95       	ret

00000a6a <_exit>:
 a6a:	f8 94       	cli

00000a6c <__stop_program>:
 a6c:	ff cf       	rjmp	.-2      	; 0xa6c <__stop_program>
