
X-Y_plotter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001268  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000012dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000093  00800060  00800060  000012dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000012dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000130c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  00001348  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002c46  00000000  00000000  00001500  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bf9  00000000  00000000  00004146  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001653  00000000  00000000  00004d3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000404  00000000  00000000  00006394  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000673  00000000  00000000  00006798  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000017b8  00000000  00000000  00006e0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  000085c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
       8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
       c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	20 e0       	ldi	r18, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a3 3f       	cpi	r26, 0xF3	; 243
      6c:	b2 07       	cpc	r27, r18
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
      70:	0e 94 34 03 	call	0x668	; 0x668 <main>
      74:	0c 94 32 09 	jmp	0x1264	; 0x1264 <_exit>

00000078 <__bad_interrupt>:
      78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <second_value>:
//***second_value_function***
//this function take one variable, and search in it about the location of ","
//then put the characters after "," in a new array of characters
//then convert string to integer value ,then return it
int second_value (char* String)
{
      7c:	ef 92       	push	r14
      7e:	ff 92       	push	r15
      80:	0f 93       	push	r16
      82:	1f 93       	push	r17
      84:	cf 93       	push	r28
      86:	df 93       	push	r29
      88:	cd b7       	in	r28, 0x3d	; 61
      8a:	de b7       	in	r29, 0x3e	; 62
      8c:	fc 01       	movw	r30, r24
          break;
    }
    for (j=0;j<length;j++)
        h [j] = String[j+i+1];
    return (atoi(h));
}
      8e:	0d b7       	in	r16, 0x3d	; 61
      90:	1e b7       	in	r17, 0x3e	; 62
//then put the characters after "," in a new array of characters
//then convert string to integer value ,then return it
int second_value (char* String)
{
    int i,j;
    int length = strlen (String);
      92:	dc 01       	movw	r26, r24
      94:	0d 90       	ld	r0, X+
      96:	00 20       	and	r0, r0
      98:	e9 f7       	brne	.-6      	; 0x94 <second_value+0x18>
      9a:	11 97       	sbiw	r26, 0x01	; 1
      9c:	bd 01       	movw	r22, r26
      9e:	68 1b       	sub	r22, r24
      a0:	79 0b       	sbc	r23, r25
      a2:	7b 01       	movw	r14, r22
    char h [length];
      a4:	8d b7       	in	r24, 0x3d	; 61
      a6:	9e b7       	in	r25, 0x3e	; 62
      a8:	86 1b       	sub	r24, r22
      aa:	97 0b       	sbc	r25, r23
      ac:	0f b6       	in	r0, 0x3f	; 63
      ae:	f8 94       	cli
      b0:	9e bf       	out	0x3e, r25	; 62
      b2:	0f be       	out	0x3f, r0	; 63
      b4:	8d bf       	out	0x3d, r24	; 61
      b6:	4d b7       	in	r20, 0x3d	; 61
      b8:	5e b7       	in	r21, 0x3e	; 62
      ba:	4f 5f       	subi	r20, 0xFF	; 255
      bc:	5f 4f       	sbci	r21, 0xFF	; 255
    for (i=0;i< length;i++)
      be:	16 16       	cp	r1, r22
      c0:	17 06       	cpc	r1, r23
      c2:	14 f5       	brge	.+68     	; 0x108 <second_value+0x8c>
    {
        if (String [i] == ',')
      c4:	80 81       	ld	r24, Z
      c6:	8c 32       	cpi	r24, 0x2C	; 44
      c8:	a1 f0       	breq	.+40     	; 0xf2 <second_value+0x76>
      ca:	df 01       	movw	r26, r30
      cc:	11 96       	adiw	r26, 0x01	; 1
      ce:	20 e0       	ldi	r18, 0x00	; 0
      d0:	30 e0       	ldi	r19, 0x00	; 0
      d2:	03 c0       	rjmp	.+6      	; 0xda <second_value+0x5e>
      d4:	9d 91       	ld	r25, X+
      d6:	9c 32       	cpi	r25, 0x2C	; 44
      d8:	71 f0       	breq	.+28     	; 0xf6 <second_value+0x7a>
int second_value (char* String)
{
    int i,j;
    int length = strlen (String);
    char h [length];
    for (i=0;i< length;i++)
      da:	2f 5f       	subi	r18, 0xFF	; 255
      dc:	3f 4f       	sbci	r19, 0xFF	; 255
      de:	e2 16       	cp	r14, r18
      e0:	f3 06       	cpc	r15, r19
      e2:	c1 f7       	brne	.-16     	; 0xd4 <second_value+0x58>
      e4:	08 c0       	rjmp	.+16     	; 0xf6 <second_value+0x7a>
    {
        if (String [i] == ',')
          break;
    }
    for (j=0;j<length;j++)
        h [j] = String[j+i+1];
      e6:	91 91       	ld	r25, Z+
      e8:	9d 93       	st	X+, r25
    for (i=0;i< length;i++)
    {
        if (String [i] == ',')
          break;
    }
    for (j=0;j<length;j++)
      ea:	a2 17       	cp	r26, r18
      ec:	b3 07       	cpc	r27, r19
      ee:	d9 f7       	brne	.-10     	; 0xe6 <second_value+0x6a>
      f0:	0b c0       	rjmp	.+22     	; 0x108 <second_value+0x8c>
int second_value (char* String)
{
    int i,j;
    int length = strlen (String);
    char h [length];
    for (i=0;i< length;i++)
      f2:	20 e0       	ldi	r18, 0x00	; 0
      f4:	30 e0       	ldi	r19, 0x00	; 0
      f6:	2f 5f       	subi	r18, 0xFF	; 255
      f8:	3f 4f       	sbci	r19, 0xFF	; 255
      fa:	e2 0f       	add	r30, r18
      fc:	f3 1f       	adc	r31, r19
      fe:	da 01       	movw	r26, r20
     100:	9a 01       	movw	r18, r20
     102:	26 0f       	add	r18, r22
     104:	37 1f       	adc	r19, r23
     106:	ef cf       	rjmp	.-34     	; 0xe6 <second_value+0x6a>
        if (String [i] == ',')
          break;
    }
    for (j=0;j<length;j++)
        h [j] = String[j+i+1];
    return (atoi(h));
     108:	ca 01       	movw	r24, r20
     10a:	0e 94 d7 08 	call	0x11ae	; 0x11ae <atoi>
}
     10e:	0f b6       	in	r0, 0x3f	; 63
     110:	f8 94       	cli
     112:	1e bf       	out	0x3e, r17	; 62
     114:	0f be       	out	0x3f, r0	; 63
     116:	0d bf       	out	0x3d, r16	; 61
     118:	df 91       	pop	r29
     11a:	cf 91       	pop	r28
     11c:	1f 91       	pop	r17
     11e:	0f 91       	pop	r16
     120:	ff 90       	pop	r15
     122:	ef 90       	pop	r14
     124:	08 95       	ret

00000126 <third_value>:
int third_value (char* String)
{
     126:	0f 93       	push	r16
     128:	1f 93       	push	r17
     12a:	cf 93       	push	r28
     12c:	df 93       	push	r29
     12e:	cd b7       	in	r28, 0x3d	; 61
     130:	de b7       	in	r29, 0x3e	; 62
		break;
	}
	for (j=0;j<length;j++)
	h [j] = String[j+i+1];
	return (atoi(h));
}
     132:	0d b7       	in	r16, 0x3d	; 61
     134:	1e b7       	in	r17, 0x3e	; 62
    return (atoi(h));
}
int third_value (char* String)
{
	int i,j;
	int length = strlen (String);
     136:	fc 01       	movw	r30, r24
     138:	01 90       	ld	r0, Z+
     13a:	00 20       	and	r0, r0
     13c:	e9 f7       	brne	.-6      	; 0x138 <third_value+0x12>
     13e:	31 97       	sbiw	r30, 0x01	; 1
     140:	9f 01       	movw	r18, r30
     142:	28 1b       	sub	r18, r24
     144:	39 0b       	sbc	r19, r25
	char h [length];
     146:	4d b7       	in	r20, 0x3d	; 61
     148:	5e b7       	in	r21, 0x3e	; 62
     14a:	42 1b       	sub	r20, r18
     14c:	53 0b       	sbc	r21, r19
     14e:	0f b6       	in	r0, 0x3f	; 63
     150:	f8 94       	cli
     152:	5e bf       	out	0x3e, r21	; 62
     154:	0f be       	out	0x3f, r0	; 63
     156:	4d bf       	out	0x3d, r20	; 61
     158:	4f 5f       	subi	r20, 0xFF	; 255
     15a:	5f 4f       	sbci	r21, 0xFF	; 255
		if (String [i] == '-'){
			
		}
		break;
	}
	for (j=0;j<length;j++)
     15c:	12 16       	cp	r1, r18
     15e:	13 06       	cpc	r1, r19
     160:	54 f4       	brge	.+20     	; 0x176 <third_value+0x50>
     162:	dc 01       	movw	r26, r24
     164:	11 96       	adiw	r26, 0x01	; 1
     166:	fa 01       	movw	r30, r20
     168:	24 0f       	add	r18, r20
     16a:	35 1f       	adc	r19, r21
	h [j] = String[j+i+1];
     16c:	9d 91       	ld	r25, X+
     16e:	91 93       	st	Z+, r25
		if (String [i] == '-'){
			
		}
		break;
	}
	for (j=0;j<length;j++)
     170:	e2 17       	cp	r30, r18
     172:	f3 07       	cpc	r31, r19
     174:	d9 f7       	brne	.-10     	; 0x16c <third_value+0x46>
	h [j] = String[j+i+1];
	return (atoi(h));
     176:	ca 01       	movw	r24, r20
     178:	0e 94 d7 08 	call	0x11ae	; 0x11ae <atoi>
}
     17c:	0f b6       	in	r0, 0x3f	; 63
     17e:	f8 94       	cli
     180:	1e bf       	out	0x3e, r17	; 62
     182:	0f be       	out	0x3f, r0	; 63
     184:	0d bf       	out	0x3d, r16	; 61
     186:	df 91       	pop	r29
     188:	cf 91       	pop	r28
     18a:	1f 91       	pop	r17
     18c:	0f 91       	pop	r16
     18e:	08 95       	ret

00000190 <sub_function>:
//call by reference is used to make a change in it, to save the new value
//this function return a value that the motor have to move
//this value could be negative or positive, it realize the direction of movements
int sub_function (int* current_pos, int new_pos)
{
    int x = new_pos - *current_pos;
     190:	fc 01       	movw	r30, r24
     192:	20 81       	ld	r18, Z
     194:	31 81       	ldd	r19, Z+1	; 0x01
    *current_pos = new_pos;
     196:	71 83       	std	Z+1, r23	; 0x01
     198:	60 83       	st	Z, r22
    return x;
     19a:	cb 01       	movw	r24, r22
     19c:	82 1b       	sub	r24, r18
     19e:	93 0b       	sbc	r25, r19
     1a0:	08 95       	ret

000001a2 <pinChange>:
}

void Lcd4_Shift_Left()
{
	Lcd4_Cmd(0x01);
	Lcd4_Cmd(0x08);
     1a2:	67 2b       	or	r22, r23
     1a4:	09 f0       	breq	.+2      	; 0x1a8 <pinChange+0x6>
     1a6:	9f c0       	rjmp	.+318    	; 0x2e6 <pinChange+0x144>
     1a8:	00 97       	sbiw	r24, 0x00	; 0
     1aa:	11 f4       	brne	.+4      	; 0x1b0 <pinChange+0xe>
     1ac:	d8 98       	cbi	0x1b, 0	; 27
     1ae:	08 95       	ret
     1b0:	81 30       	cpi	r24, 0x01	; 1
     1b2:	91 05       	cpc	r25, r1
     1b4:	11 f4       	brne	.+4      	; 0x1ba <pinChange+0x18>
     1b6:	d9 98       	cbi	0x1b, 1	; 27
     1b8:	08 95       	ret
     1ba:	82 30       	cpi	r24, 0x02	; 2
     1bc:	91 05       	cpc	r25, r1
     1be:	11 f4       	brne	.+4      	; 0x1c4 <pinChange+0x22>
     1c0:	da 98       	cbi	0x1b, 2	; 27
     1c2:	08 95       	ret
     1c4:	83 30       	cpi	r24, 0x03	; 3
     1c6:	91 05       	cpc	r25, r1
     1c8:	11 f4       	brne	.+4      	; 0x1ce <pinChange+0x2c>
     1ca:	db 98       	cbi	0x1b, 3	; 27
     1cc:	08 95       	ret
     1ce:	84 30       	cpi	r24, 0x04	; 4
     1d0:	91 05       	cpc	r25, r1
     1d2:	11 f4       	brne	.+4      	; 0x1d8 <pinChange+0x36>
     1d4:	dc 98       	cbi	0x1b, 4	; 27
     1d6:	08 95       	ret
     1d8:	85 30       	cpi	r24, 0x05	; 5
     1da:	91 05       	cpc	r25, r1
     1dc:	11 f4       	brne	.+4      	; 0x1e2 <pinChange+0x40>
     1de:	dd 98       	cbi	0x1b, 5	; 27
     1e0:	08 95       	ret
     1e2:	86 30       	cpi	r24, 0x06	; 6
     1e4:	91 05       	cpc	r25, r1
     1e6:	11 f4       	brne	.+4      	; 0x1ec <pinChange+0x4a>
     1e8:	de 98       	cbi	0x1b, 6	; 27
     1ea:	08 95       	ret
     1ec:	87 30       	cpi	r24, 0x07	; 7
     1ee:	91 05       	cpc	r25, r1
     1f0:	11 f4       	brne	.+4      	; 0x1f6 <pinChange+0x54>
     1f2:	df 98       	cbi	0x1b, 7	; 27
     1f4:	08 95       	ret
     1f6:	8a 30       	cpi	r24, 0x0A	; 10
     1f8:	91 05       	cpc	r25, r1
     1fa:	11 f4       	brne	.+4      	; 0x200 <pinChange+0x5e>
     1fc:	c0 98       	cbi	0x18, 0	; 24
     1fe:	08 95       	ret
     200:	8b 30       	cpi	r24, 0x0B	; 11
     202:	91 05       	cpc	r25, r1
     204:	11 f4       	brne	.+4      	; 0x20a <pinChange+0x68>
     206:	c1 98       	cbi	0x18, 1	; 24
     208:	08 95       	ret
     20a:	8c 30       	cpi	r24, 0x0C	; 12
     20c:	91 05       	cpc	r25, r1
     20e:	11 f4       	brne	.+4      	; 0x214 <pinChange+0x72>
     210:	c2 98       	cbi	0x18, 2	; 24
     212:	08 95       	ret
     214:	8d 30       	cpi	r24, 0x0D	; 13
     216:	91 05       	cpc	r25, r1
     218:	11 f4       	brne	.+4      	; 0x21e <pinChange+0x7c>
     21a:	c3 98       	cbi	0x18, 3	; 24
     21c:	08 95       	ret
     21e:	8e 30       	cpi	r24, 0x0E	; 14
     220:	91 05       	cpc	r25, r1
     222:	11 f4       	brne	.+4      	; 0x228 <pinChange+0x86>
     224:	c4 98       	cbi	0x18, 4	; 24
     226:	08 95       	ret
     228:	8f 30       	cpi	r24, 0x0F	; 15
     22a:	91 05       	cpc	r25, r1
     22c:	11 f4       	brne	.+4      	; 0x232 <pinChange+0x90>
     22e:	c5 98       	cbi	0x18, 5	; 24
     230:	08 95       	ret
     232:	80 31       	cpi	r24, 0x10	; 16
     234:	91 05       	cpc	r25, r1
     236:	11 f4       	brne	.+4      	; 0x23c <pinChange+0x9a>
     238:	c6 98       	cbi	0x18, 6	; 24
     23a:	08 95       	ret
     23c:	81 31       	cpi	r24, 0x11	; 17
     23e:	91 05       	cpc	r25, r1
     240:	11 f4       	brne	.+4      	; 0x246 <pinChange+0xa4>
     242:	c7 98       	cbi	0x18, 7	; 24
     244:	08 95       	ret
     246:	84 31       	cpi	r24, 0x14	; 20
     248:	91 05       	cpc	r25, r1
     24a:	11 f4       	brne	.+4      	; 0x250 <pinChange+0xae>
     24c:	a8 98       	cbi	0x15, 0	; 21
     24e:	08 95       	ret
     250:	85 31       	cpi	r24, 0x15	; 21
     252:	91 05       	cpc	r25, r1
     254:	11 f4       	brne	.+4      	; 0x25a <pinChange+0xb8>
     256:	a9 98       	cbi	0x15, 1	; 21
     258:	08 95       	ret
     25a:	86 31       	cpi	r24, 0x16	; 22
     25c:	91 05       	cpc	r25, r1
     25e:	11 f4       	brne	.+4      	; 0x264 <pinChange+0xc2>
     260:	aa 98       	cbi	0x15, 2	; 21
     262:	08 95       	ret
     264:	87 31       	cpi	r24, 0x17	; 23
     266:	91 05       	cpc	r25, r1
     268:	11 f4       	brne	.+4      	; 0x26e <pinChange+0xcc>
     26a:	ab 98       	cbi	0x15, 3	; 21
     26c:	08 95       	ret
     26e:	88 31       	cpi	r24, 0x18	; 24
     270:	91 05       	cpc	r25, r1
     272:	11 f4       	brne	.+4      	; 0x278 <pinChange+0xd6>
     274:	ac 98       	cbi	0x15, 4	; 21
     276:	08 95       	ret
     278:	89 31       	cpi	r24, 0x19	; 25
     27a:	91 05       	cpc	r25, r1
     27c:	11 f4       	brne	.+4      	; 0x282 <pinChange+0xe0>
     27e:	ad 98       	cbi	0x15, 5	; 21
     280:	08 95       	ret
     282:	8a 31       	cpi	r24, 0x1A	; 26
     284:	91 05       	cpc	r25, r1
     286:	11 f4       	brne	.+4      	; 0x28c <pinChange+0xea>
     288:	ae 98       	cbi	0x15, 6	; 21
     28a:	08 95       	ret
     28c:	8b 31       	cpi	r24, 0x1B	; 27
     28e:	91 05       	cpc	r25, r1
     290:	11 f4       	brne	.+4      	; 0x296 <pinChange+0xf4>
     292:	af 98       	cbi	0x15, 7	; 21
     294:	08 95       	ret
     296:	8e 31       	cpi	r24, 0x1E	; 30
     298:	91 05       	cpc	r25, r1
     29a:	11 f4       	brne	.+4      	; 0x2a0 <pinChange+0xfe>
     29c:	90 98       	cbi	0x12, 0	; 18
     29e:	08 95       	ret
     2a0:	8f 31       	cpi	r24, 0x1F	; 31
     2a2:	91 05       	cpc	r25, r1
     2a4:	11 f4       	brne	.+4      	; 0x2aa <pinChange+0x108>
     2a6:	91 98       	cbi	0x12, 1	; 18
     2a8:	08 95       	ret
     2aa:	80 32       	cpi	r24, 0x20	; 32
     2ac:	91 05       	cpc	r25, r1
     2ae:	11 f4       	brne	.+4      	; 0x2b4 <pinChange+0x112>
     2b0:	92 98       	cbi	0x12, 2	; 18
     2b2:	08 95       	ret
     2b4:	81 32       	cpi	r24, 0x21	; 33
     2b6:	91 05       	cpc	r25, r1
     2b8:	11 f4       	brne	.+4      	; 0x2be <pinChange+0x11c>
     2ba:	93 98       	cbi	0x12, 3	; 18
     2bc:	08 95       	ret
     2be:	82 32       	cpi	r24, 0x22	; 34
     2c0:	91 05       	cpc	r25, r1
     2c2:	11 f4       	brne	.+4      	; 0x2c8 <pinChange+0x126>
     2c4:	94 98       	cbi	0x12, 4	; 18
     2c6:	08 95       	ret
     2c8:	83 32       	cpi	r24, 0x23	; 35
     2ca:	91 05       	cpc	r25, r1
     2cc:	11 f4       	brne	.+4      	; 0x2d2 <pinChange+0x130>
     2ce:	95 98       	cbi	0x12, 5	; 18
     2d0:	08 95       	ret
     2d2:	84 32       	cpi	r24, 0x24	; 36
     2d4:	91 05       	cpc	r25, r1
     2d6:	11 f4       	brne	.+4      	; 0x2dc <pinChange+0x13a>
     2d8:	96 98       	cbi	0x12, 6	; 18
     2da:	08 95       	ret
     2dc:	85 97       	sbiw	r24, 0x25	; 37
     2de:	09 f0       	breq	.+2      	; 0x2e2 <pinChange+0x140>
     2e0:	9f c0       	rjmp	.+318    	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     2e2:	97 98       	cbi	0x12, 7	; 18
     2e4:	08 95       	ret
     2e6:	00 97       	sbiw	r24, 0x00	; 0
     2e8:	11 f4       	brne	.+4      	; 0x2ee <pinChange+0x14c>
     2ea:	d8 9a       	sbi	0x1b, 0	; 27
     2ec:	08 95       	ret
     2ee:	81 30       	cpi	r24, 0x01	; 1
     2f0:	91 05       	cpc	r25, r1
     2f2:	11 f4       	brne	.+4      	; 0x2f8 <pinChange+0x156>
     2f4:	d9 9a       	sbi	0x1b, 1	; 27
     2f6:	08 95       	ret
     2f8:	82 30       	cpi	r24, 0x02	; 2
     2fa:	91 05       	cpc	r25, r1
     2fc:	11 f4       	brne	.+4      	; 0x302 <pinChange+0x160>
     2fe:	da 9a       	sbi	0x1b, 2	; 27
     300:	08 95       	ret
     302:	83 30       	cpi	r24, 0x03	; 3
     304:	91 05       	cpc	r25, r1
     306:	11 f4       	brne	.+4      	; 0x30c <pinChange+0x16a>
     308:	db 9a       	sbi	0x1b, 3	; 27
     30a:	08 95       	ret
     30c:	84 30       	cpi	r24, 0x04	; 4
     30e:	91 05       	cpc	r25, r1
     310:	11 f4       	brne	.+4      	; 0x316 <pinChange+0x174>
     312:	dc 9a       	sbi	0x1b, 4	; 27
     314:	08 95       	ret
     316:	85 30       	cpi	r24, 0x05	; 5
     318:	91 05       	cpc	r25, r1
     31a:	11 f4       	brne	.+4      	; 0x320 <pinChange+0x17e>
     31c:	dd 9a       	sbi	0x1b, 5	; 27
     31e:	08 95       	ret
     320:	86 30       	cpi	r24, 0x06	; 6
     322:	91 05       	cpc	r25, r1
     324:	11 f4       	brne	.+4      	; 0x32a <pinChange+0x188>
     326:	de 9a       	sbi	0x1b, 6	; 27
     328:	08 95       	ret
     32a:	87 30       	cpi	r24, 0x07	; 7
     32c:	91 05       	cpc	r25, r1
     32e:	11 f4       	brne	.+4      	; 0x334 <pinChange+0x192>
     330:	df 9a       	sbi	0x1b, 7	; 27
     332:	08 95       	ret
     334:	8a 30       	cpi	r24, 0x0A	; 10
     336:	91 05       	cpc	r25, r1
     338:	11 f4       	brne	.+4      	; 0x33e <pinChange+0x19c>
     33a:	c0 9a       	sbi	0x18, 0	; 24
     33c:	08 95       	ret
     33e:	8b 30       	cpi	r24, 0x0B	; 11
     340:	91 05       	cpc	r25, r1
     342:	11 f4       	brne	.+4      	; 0x348 <pinChange+0x1a6>
     344:	c1 9a       	sbi	0x18, 1	; 24
     346:	08 95       	ret
     348:	8c 30       	cpi	r24, 0x0C	; 12
     34a:	91 05       	cpc	r25, r1
     34c:	11 f4       	brne	.+4      	; 0x352 <pinChange+0x1b0>
     34e:	c2 9a       	sbi	0x18, 2	; 24
     350:	08 95       	ret
     352:	8d 30       	cpi	r24, 0x0D	; 13
     354:	91 05       	cpc	r25, r1
     356:	11 f4       	brne	.+4      	; 0x35c <pinChange+0x1ba>
     358:	c3 9a       	sbi	0x18, 3	; 24
     35a:	08 95       	ret
     35c:	8e 30       	cpi	r24, 0x0E	; 14
     35e:	91 05       	cpc	r25, r1
     360:	11 f4       	brne	.+4      	; 0x366 <pinChange+0x1c4>
     362:	c4 9a       	sbi	0x18, 4	; 24
     364:	08 95       	ret
     366:	8f 30       	cpi	r24, 0x0F	; 15
     368:	91 05       	cpc	r25, r1
     36a:	11 f4       	brne	.+4      	; 0x370 <pinChange+0x1ce>
     36c:	c5 9a       	sbi	0x18, 5	; 24
     36e:	08 95       	ret
     370:	80 31       	cpi	r24, 0x10	; 16
     372:	91 05       	cpc	r25, r1
     374:	11 f4       	brne	.+4      	; 0x37a <pinChange+0x1d8>
     376:	c6 9a       	sbi	0x18, 6	; 24
     378:	08 95       	ret
     37a:	81 31       	cpi	r24, 0x11	; 17
     37c:	91 05       	cpc	r25, r1
     37e:	11 f4       	brne	.+4      	; 0x384 <pinChange+0x1e2>
     380:	c7 9a       	sbi	0x18, 7	; 24
     382:	08 95       	ret
     384:	84 31       	cpi	r24, 0x14	; 20
     386:	91 05       	cpc	r25, r1
     388:	11 f4       	brne	.+4      	; 0x38e <pinChange+0x1ec>
     38a:	a8 9a       	sbi	0x15, 0	; 21
     38c:	08 95       	ret
     38e:	85 31       	cpi	r24, 0x15	; 21
     390:	91 05       	cpc	r25, r1
     392:	11 f4       	brne	.+4      	; 0x398 <pinChange+0x1f6>
     394:	a9 9a       	sbi	0x15, 1	; 21
     396:	08 95       	ret
     398:	86 31       	cpi	r24, 0x16	; 22
     39a:	91 05       	cpc	r25, r1
     39c:	11 f4       	brne	.+4      	; 0x3a2 <pinChange+0x200>
     39e:	aa 9a       	sbi	0x15, 2	; 21
     3a0:	08 95       	ret
     3a2:	87 31       	cpi	r24, 0x17	; 23
     3a4:	91 05       	cpc	r25, r1
     3a6:	11 f4       	brne	.+4      	; 0x3ac <pinChange+0x20a>
     3a8:	ab 9a       	sbi	0x15, 3	; 21
     3aa:	08 95       	ret
     3ac:	88 31       	cpi	r24, 0x18	; 24
     3ae:	91 05       	cpc	r25, r1
     3b0:	11 f4       	brne	.+4      	; 0x3b6 <pinChange+0x214>
     3b2:	ac 9a       	sbi	0x15, 4	; 21
     3b4:	08 95       	ret
     3b6:	89 31       	cpi	r24, 0x19	; 25
     3b8:	91 05       	cpc	r25, r1
     3ba:	11 f4       	brne	.+4      	; 0x3c0 <pinChange+0x21e>
     3bc:	ad 9a       	sbi	0x15, 5	; 21
     3be:	08 95       	ret
     3c0:	8a 31       	cpi	r24, 0x1A	; 26
     3c2:	91 05       	cpc	r25, r1
     3c4:	11 f4       	brne	.+4      	; 0x3ca <pinChange+0x228>
     3c6:	ae 9a       	sbi	0x15, 6	; 21
     3c8:	08 95       	ret
     3ca:	8b 31       	cpi	r24, 0x1B	; 27
     3cc:	91 05       	cpc	r25, r1
     3ce:	11 f4       	brne	.+4      	; 0x3d4 <pinChange+0x232>
     3d0:	af 9a       	sbi	0x15, 7	; 21
     3d2:	08 95       	ret
     3d4:	8e 31       	cpi	r24, 0x1E	; 30
     3d6:	91 05       	cpc	r25, r1
     3d8:	11 f4       	brne	.+4      	; 0x3de <pinChange+0x23c>
     3da:	90 9a       	sbi	0x12, 0	; 18
     3dc:	08 95       	ret
     3de:	8f 31       	cpi	r24, 0x1F	; 31
     3e0:	91 05       	cpc	r25, r1
     3e2:	11 f4       	brne	.+4      	; 0x3e8 <pinChange+0x246>
     3e4:	91 9a       	sbi	0x12, 1	; 18
     3e6:	08 95       	ret
     3e8:	80 32       	cpi	r24, 0x20	; 32
     3ea:	91 05       	cpc	r25, r1
     3ec:	11 f4       	brne	.+4      	; 0x3f2 <pinChange+0x250>
     3ee:	92 9a       	sbi	0x12, 2	; 18
     3f0:	08 95       	ret
     3f2:	81 32       	cpi	r24, 0x21	; 33
     3f4:	91 05       	cpc	r25, r1
     3f6:	11 f4       	brne	.+4      	; 0x3fc <pinChange+0x25a>
     3f8:	93 9a       	sbi	0x12, 3	; 18
     3fa:	08 95       	ret
     3fc:	82 32       	cpi	r24, 0x22	; 34
     3fe:	91 05       	cpc	r25, r1
     400:	11 f4       	brne	.+4      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     402:	94 9a       	sbi	0x12, 4	; 18
     404:	08 95       	ret
     406:	83 32       	cpi	r24, 0x23	; 35
     408:	91 05       	cpc	r25, r1
     40a:	11 f4       	brne	.+4      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     40c:	95 9a       	sbi	0x12, 5	; 18
     40e:	08 95       	ret
     410:	84 32       	cpi	r24, 0x24	; 36
     412:	91 05       	cpc	r25, r1
     414:	11 f4       	brne	.+4      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     416:	96 9a       	sbi	0x12, 6	; 18
     418:	08 95       	ret
     41a:	85 97       	sbiw	r24, 0x25	; 37
     41c:	09 f4       	brne	.+2      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     41e:	97 9a       	sbi	0x12, 7	; 18
     420:	08 95       	ret

00000422 <Lcd4_Port>:
     422:	cf 93       	push	r28
     424:	c8 2f       	mov	r28, r24
     426:	80 ff       	sbrs	r24, 0
     428:	07 c0       	rjmp	.+14     	; 0x438 <Lcd4_Port+0x16>
     42a:	61 e0       	ldi	r22, 0x01	; 1
     42c:	70 e0       	ldi	r23, 0x00	; 0
     42e:	8a e0       	ldi	r24, 0x0A	; 10
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <pinChange>
     436:	06 c0       	rjmp	.+12     	; 0x444 <Lcd4_Port+0x22>
     438:	60 e0       	ldi	r22, 0x00	; 0
     43a:	70 e0       	ldi	r23, 0x00	; 0
     43c:	8a e0       	ldi	r24, 0x0A	; 10
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <pinChange>
     444:	c1 ff       	sbrs	r28, 1
     446:	07 c0       	rjmp	.+14     	; 0x456 <Lcd4_Port+0x34>
     448:	61 e0       	ldi	r22, 0x01	; 1
     44a:	70 e0       	ldi	r23, 0x00	; 0
     44c:	8b e0       	ldi	r24, 0x0B	; 11
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <pinChange>
     454:	06 c0       	rjmp	.+12     	; 0x462 <__stack+0x3>
     456:	60 e0       	ldi	r22, 0x00	; 0
     458:	70 e0       	ldi	r23, 0x00	; 0
     45a:	8b e0       	ldi	r24, 0x0B	; 11
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <pinChange>
     462:	c2 ff       	sbrs	r28, 2
     464:	07 c0       	rjmp	.+14     	; 0x474 <__stack+0x15>
     466:	61 e0       	ldi	r22, 0x01	; 1
     468:	70 e0       	ldi	r23, 0x00	; 0
     46a:	8c e0       	ldi	r24, 0x0C	; 12
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <pinChange>
     472:	06 c0       	rjmp	.+12     	; 0x480 <__stack+0x21>
     474:	60 e0       	ldi	r22, 0x00	; 0
     476:	70 e0       	ldi	r23, 0x00	; 0
     478:	8c e0       	ldi	r24, 0x0C	; 12
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <pinChange>
     480:	c3 ff       	sbrs	r28, 3
     482:	07 c0       	rjmp	.+14     	; 0x492 <__stack+0x33>
     484:	61 e0       	ldi	r22, 0x01	; 1
     486:	70 e0       	ldi	r23, 0x00	; 0
     488:	8d e0       	ldi	r24, 0x0D	; 13
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <pinChange>
     490:	06 c0       	rjmp	.+12     	; 0x49e <__stack+0x3f>
     492:	60 e0       	ldi	r22, 0x00	; 0
     494:	70 e0       	ldi	r23, 0x00	; 0
     496:	8d e0       	ldi	r24, 0x0D	; 13
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <pinChange>
     49e:	cf 91       	pop	r28
     4a0:	08 95       	ret

000004a2 <Lcd4_Cmd>:
     4a2:	cf 93       	push	r28
     4a4:	c8 2f       	mov	r28, r24
     4a6:	60 e0       	ldi	r22, 0x00	; 0
     4a8:	70 e0       	ldi	r23, 0x00	; 0
     4aa:	8e e0       	ldi	r24, 0x0E	; 14
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <pinChange>
     4b2:	8c 2f       	mov	r24, r28
     4b4:	0e 94 11 02 	call	0x422	; 0x422 <Lcd4_Port>
     4b8:	61 e0       	ldi	r22, 0x01	; 1
     4ba:	70 e0       	ldi	r23, 0x00	; 0
     4bc:	8f e0       	ldi	r24, 0x0F	; 15
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <pinChange>
     4c4:	8f e9       	ldi	r24, 0x9F	; 159
     4c6:	9f e0       	ldi	r25, 0x0F	; 15
     4c8:	01 97       	sbiw	r24, 0x01	; 1
     4ca:	f1 f7       	brne	.-4      	; 0x4c8 <Lcd4_Cmd+0x26>
     4cc:	00 c0       	rjmp	.+0      	; 0x4ce <Lcd4_Cmd+0x2c>
     4ce:	00 00       	nop
     4d0:	60 e0       	ldi	r22, 0x00	; 0
     4d2:	70 e0       	ldi	r23, 0x00	; 0
     4d4:	8f e0       	ldi	r24, 0x0F	; 15
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <pinChange>
     4dc:	8f e9       	ldi	r24, 0x9F	; 159
     4de:	9f e0       	ldi	r25, 0x0F	; 15
     4e0:	01 97       	sbiw	r24, 0x01	; 1
     4e2:	f1 f7       	brne	.-4      	; 0x4e0 <Lcd4_Cmd+0x3e>
     4e4:	00 c0       	rjmp	.+0      	; 0x4e6 <Lcd4_Cmd+0x44>
     4e6:	00 00       	nop
     4e8:	cf 91       	pop	r28
     4ea:	08 95       	ret

000004ec <Lcd4_Clear>:
     4ec:	80 e0       	ldi	r24, 0x00	; 0
     4ee:	0e 94 51 02 	call	0x4a2	; 0x4a2 <Lcd4_Cmd>
     4f2:	81 e0       	ldi	r24, 0x01	; 1
     4f4:	0e 94 51 02 	call	0x4a2	; 0x4a2 <Lcd4_Cmd>
     4f8:	08 95       	ret

000004fa <Lcd4_Set_Cursor>:
     4fa:	cf 93       	push	r28
     4fc:	c6 2f       	mov	r28, r22
     4fe:	81 30       	cpi	r24, 0x01	; 1
     500:	59 f4       	brne	.+22     	; 0x518 <Lcd4_Set_Cursor+0x1e>
     502:	80 e8       	ldi	r24, 0x80	; 128
     504:	86 0f       	add	r24, r22
     506:	82 95       	swap	r24
     508:	8f 70       	andi	r24, 0x0F	; 15
     50a:	0e 94 51 02 	call	0x4a2	; 0x4a2 <Lcd4_Cmd>
     50e:	8c 2f       	mov	r24, r28
     510:	8f 70       	andi	r24, 0x0F	; 15
     512:	0e 94 51 02 	call	0x4a2	; 0x4a2 <Lcd4_Cmd>
     516:	0c c0       	rjmp	.+24     	; 0x530 <Lcd4_Set_Cursor+0x36>
     518:	82 30       	cpi	r24, 0x02	; 2
     51a:	51 f4       	brne	.+20     	; 0x530 <Lcd4_Set_Cursor+0x36>
     51c:	80 ec       	ldi	r24, 0xC0	; 192
     51e:	86 0f       	add	r24, r22
     520:	82 95       	swap	r24
     522:	8f 70       	andi	r24, 0x0F	; 15
     524:	0e 94 51 02 	call	0x4a2	; 0x4a2 <Lcd4_Cmd>
     528:	8c 2f       	mov	r24, r28
     52a:	8f 70       	andi	r24, 0x0F	; 15
     52c:	0e 94 51 02 	call	0x4a2	; 0x4a2 <Lcd4_Cmd>
     530:	cf 91       	pop	r28
     532:	08 95       	ret

00000534 <Lcd4_Init>:
     534:	80 e0       	ldi	r24, 0x00	; 0
     536:	0e 94 11 02 	call	0x422	; 0x422 <Lcd4_Port>
     53a:	2f ef       	ldi	r18, 0xFF	; 255
     53c:	89 ef       	ldi	r24, 0xF9	; 249
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	21 50       	subi	r18, 0x01	; 1
     542:	80 40       	sbci	r24, 0x00	; 0
     544:	90 40       	sbci	r25, 0x00	; 0
     546:	e1 f7       	brne	.-8      	; 0x540 <Lcd4_Init+0xc>
     548:	00 c0       	rjmp	.+0      	; 0x54a <Lcd4_Init+0x16>
     54a:	00 00       	nop
     54c:	83 e0       	ldi	r24, 0x03	; 3
     54e:	0e 94 51 02 	call	0x4a2	; 0x4a2 <Lcd4_Cmd>
     552:	8f e1       	ldi	r24, 0x1F	; 31
     554:	9e e4       	ldi	r25, 0x4E	; 78
     556:	01 97       	sbiw	r24, 0x01	; 1
     558:	f1 f7       	brne	.-4      	; 0x556 <Lcd4_Init+0x22>
     55a:	00 c0       	rjmp	.+0      	; 0x55c <Lcd4_Init+0x28>
     55c:	00 00       	nop
     55e:	83 e0       	ldi	r24, 0x03	; 3
     560:	0e 94 51 02 	call	0x4a2	; 0x4a2 <Lcd4_Cmd>
     564:	8f ed       	ldi	r24, 0xDF	; 223
     566:	9b ea       	ldi	r25, 0xAB	; 171
     568:	01 97       	sbiw	r24, 0x01	; 1
     56a:	f1 f7       	brne	.-4      	; 0x568 <Lcd4_Init+0x34>
     56c:	00 c0       	rjmp	.+0      	; 0x56e <Lcd4_Init+0x3a>
     56e:	00 00       	nop
     570:	83 e0       	ldi	r24, 0x03	; 3
     572:	0e 94 51 02 	call	0x4a2	; 0x4a2 <Lcd4_Cmd>
     576:	82 e0       	ldi	r24, 0x02	; 2
     578:	0e 94 51 02 	call	0x4a2	; 0x4a2 <Lcd4_Cmd>
     57c:	82 e0       	ldi	r24, 0x02	; 2
     57e:	0e 94 51 02 	call	0x4a2	; 0x4a2 <Lcd4_Cmd>
     582:	88 e0       	ldi	r24, 0x08	; 8
     584:	0e 94 51 02 	call	0x4a2	; 0x4a2 <Lcd4_Cmd>
     588:	80 e0       	ldi	r24, 0x00	; 0
     58a:	0e 94 51 02 	call	0x4a2	; 0x4a2 <Lcd4_Cmd>
     58e:	8c e0       	ldi	r24, 0x0C	; 12
     590:	0e 94 51 02 	call	0x4a2	; 0x4a2 <Lcd4_Cmd>
     594:	80 e0       	ldi	r24, 0x00	; 0
     596:	0e 94 51 02 	call	0x4a2	; 0x4a2 <Lcd4_Cmd>
     59a:	86 e0       	ldi	r24, 0x06	; 6
     59c:	0e 94 51 02 	call	0x4a2	; 0x4a2 <Lcd4_Cmd>
     5a0:	08 95       	ret

000005a2 <Lcd4_Write_Char>:
     5a2:	cf 93       	push	r28
     5a4:	c8 2f       	mov	r28, r24
     5a6:	61 e0       	ldi	r22, 0x01	; 1
     5a8:	70 e0       	ldi	r23, 0x00	; 0
     5aa:	8e e0       	ldi	r24, 0x0E	; 14
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <pinChange>
     5b2:	8c 2f       	mov	r24, r28
     5b4:	82 95       	swap	r24
     5b6:	8f 70       	andi	r24, 0x0F	; 15
     5b8:	0e 94 11 02 	call	0x422	; 0x422 <Lcd4_Port>
     5bc:	61 e0       	ldi	r22, 0x01	; 1
     5be:	70 e0       	ldi	r23, 0x00	; 0
     5c0:	8f e0       	ldi	r24, 0x0F	; 15
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <pinChange>
     5c8:	8f e9       	ldi	r24, 0x9F	; 159
     5ca:	9f e0       	ldi	r25, 0x0F	; 15
     5cc:	01 97       	sbiw	r24, 0x01	; 1
     5ce:	f1 f7       	brne	.-4      	; 0x5cc <Lcd4_Write_Char+0x2a>
     5d0:	00 c0       	rjmp	.+0      	; 0x5d2 <Lcd4_Write_Char+0x30>
     5d2:	00 00       	nop
     5d4:	60 e0       	ldi	r22, 0x00	; 0
     5d6:	70 e0       	ldi	r23, 0x00	; 0
     5d8:	8f e0       	ldi	r24, 0x0F	; 15
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <pinChange>
     5e0:	8f e9       	ldi	r24, 0x9F	; 159
     5e2:	9f e0       	ldi	r25, 0x0F	; 15
     5e4:	01 97       	sbiw	r24, 0x01	; 1
     5e6:	f1 f7       	brne	.-4      	; 0x5e4 <Lcd4_Write_Char+0x42>
     5e8:	00 c0       	rjmp	.+0      	; 0x5ea <Lcd4_Write_Char+0x48>
     5ea:	00 00       	nop
     5ec:	8c 2f       	mov	r24, r28
     5ee:	8f 70       	andi	r24, 0x0F	; 15
     5f0:	0e 94 11 02 	call	0x422	; 0x422 <Lcd4_Port>
     5f4:	61 e0       	ldi	r22, 0x01	; 1
     5f6:	70 e0       	ldi	r23, 0x00	; 0
     5f8:	8f e0       	ldi	r24, 0x0F	; 15
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <pinChange>
     600:	8f e9       	ldi	r24, 0x9F	; 159
     602:	9f e0       	ldi	r25, 0x0F	; 15
     604:	01 97       	sbiw	r24, 0x01	; 1
     606:	f1 f7       	brne	.-4      	; 0x604 <Lcd4_Write_Char+0x62>
     608:	00 c0       	rjmp	.+0      	; 0x60a <Lcd4_Write_Char+0x68>
     60a:	00 00       	nop
     60c:	60 e0       	ldi	r22, 0x00	; 0
     60e:	70 e0       	ldi	r23, 0x00	; 0
     610:	8f e0       	ldi	r24, 0x0F	; 15
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <pinChange>
     618:	8f e9       	ldi	r24, 0x9F	; 159
     61a:	9f e0       	ldi	r25, 0x0F	; 15
     61c:	01 97       	sbiw	r24, 0x01	; 1
     61e:	f1 f7       	brne	.-4      	; 0x61c <Lcd4_Write_Char+0x7a>
     620:	00 c0       	rjmp	.+0      	; 0x622 <Lcd4_Write_Char+0x80>
     622:	00 00       	nop
     624:	cf 91       	pop	r28
     626:	08 95       	ret

00000628 <Lcd4_Write_String>:
     628:	cf 93       	push	r28
     62a:	df 93       	push	r29
     62c:	ec 01       	movw	r28, r24
     62e:	88 81       	ld	r24, Y
     630:	88 23       	and	r24, r24
     632:	31 f0       	breq	.+12     	; 0x640 <Lcd4_Write_String+0x18>
     634:	21 96       	adiw	r28, 0x01	; 1
     636:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <Lcd4_Write_Char>
     63a:	89 91       	ld	r24, Y+
     63c:	81 11       	cpse	r24, r1
     63e:	fb cf       	rjmp	.-10     	; 0x636 <Lcd4_Write_String+0xe>
     640:	df 91       	pop	r29
     642:	cf 91       	pop	r28
     644:	08 95       	ret

00000646 <Init>:

	}
}
void Init(void)
{
	StepperInit(1,1000);
     646:	68 ee       	ldi	r22, 0xE8	; 232
     648:	73 e0       	ldi	r23, 0x03	; 3
     64a:	81 e0       	ldi	r24, 0x01	; 1
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	0e 94 97 06 	call	0xd2e	; 0xd2e <StepperInit>
	DDRC |=(1<<PC0)|(1<<PC1)|(1<<PC2)|(1<<PC3)|(1<<PC4)|(1<<PC5)|(1<<PC6);
     652:	84 b3       	in	r24, 0x14	; 20
     654:	8f 67       	ori	r24, 0x7F	; 127
     656:	84 bb       	out	0x14, r24	; 20
	DDRB |=(1<<PB0)|(1<<PB1)|(1<<PB2)|(1<<PB3)|(1<<PB4)|(1<<PB5);// use PB0,1,2,3,4,5 as output for LCD
     658:	87 b3       	in	r24, 0x17	; 23
     65a:	8f 63       	ori	r24, 0x3F	; 63
     65c:	87 bb       	out	0x17, r24	; 23
	//UART_Init(9600);
	UART_INIT();
     65e:	0e 94 5e 07 	call	0xebc	; 0xebc <UART_INIT>
	Lcd4_Init();
     662:	0e 94 9a 02 	call	0x534	; 0x534 <Lcd4_Init>
     666:	08 95       	ret

00000668 <main>:
char string [12] ;
char s1[30];
char s2[30];
char s3[30];
int main(void)
{
     668:	cf 93       	push	r28
     66a:	df 93       	push	r29
     66c:	00 d0       	rcall	.+0      	; 0x66e <main+0x6>
     66e:	00 d0       	rcall	.+0      	; 0x670 <main+0x8>
     670:	cd b7       	in	r28, 0x3d	; 61
     672:	de b7       	in	r29, 0x3e	; 62
	Init();
     674:	0e 94 23 03 	call	0x646	; 0x646 <Init>
	while (1)
	{

		Lcd4_Clear();
     678:	0e 94 76 02 	call	0x4ec	; 0x4ec <Lcd4_Clear>
		//UART_Rxstring(string);
		Recive_Data();
     67c:	0e 94 6a 07 	call	0xed4	; 0xed4 <Recive_Data>
		value_1 = atoi(string);           //extract first value
     680:	82 e8       	ldi	r24, 0x82	; 130
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	0e 94 d7 08 	call	0x11ae	; 0x11ae <atoi>
     688:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <value_1+0x1>
     68c:	80 93 8f 00 	sts	0x008F, r24	; 0x80008f <value_1>
		value_2 = second_value (string); //call function to extract second value
     690:	82 e8       	ldi	r24, 0x82	; 130
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	0e 94 3e 00 	call	0x7c	; 0x7c <second_value>
     698:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <value_2+0x1>
     69c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <value_2>
		value_3 = third_value (string); //call function to extract third value
     6a0:	82 e8       	ldi	r24, 0x82	; 130
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	0e 94 93 00 	call	0x126	; 0x126 <third_value>
     6a8:	90 93 b2 00 	sts	0x00B2, r25	; 0x8000b2 <value_3+0x1>
     6ac:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <value_3>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     6b0:	4a e0       	ldi	r20, 0x0A	; 10
     6b2:	61 e9       	ldi	r22, 0x91	; 145
     6b4:	70 e0       	ldi	r23, 0x00	; 0
     6b6:	80 91 8f 00 	lds	r24, 0x008F	; 0x80008f <value_1>
     6ba:	90 91 90 00 	lds	r25, 0x0090	; 0x800090 <value_1+0x1>
     6be:	0e 94 f5 08 	call	0x11ea	; 0x11ea <__itoa_ncheck>
     6c2:	4a e0       	ldi	r20, 0x0A	; 10
     6c4:	63 eb       	ldi	r22, 0xB3	; 179
     6c6:	70 e0       	ldi	r23, 0x00	; 0
     6c8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <value_2>
     6cc:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <value_2+0x1>
     6d0:	0e 94 f5 08 	call	0x11ea	; 0x11ea <__itoa_ncheck>
     6d4:	4a e0       	ldi	r20, 0x0A	; 10
     6d6:	62 ed       	ldi	r22, 0xD2	; 210
     6d8:	70 e0       	ldi	r23, 0x00	; 0
     6da:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <value_3>
     6de:	90 91 b2 00 	lds	r25, 0x00B2	; 0x8000b2 <value_3+0x1>
     6e2:	0e 94 f5 08 	call	0x11ea	; 0x11ea <__itoa_ncheck>
		
		itoa(value_1,s1,10);
		itoa(value_2,s2,10);
		itoa(value_3,s3,10);
		Lcd4_Set_Cursor(1,1);
     6e6:	61 e0       	ldi	r22, 0x01	; 1
     6e8:	81 e0       	ldi	r24, 0x01	; 1
     6ea:	0e 94 7d 02 	call	0x4fa	; 0x4fa <Lcd4_Set_Cursor>
		Lcd4_Write_String(s1);
     6ee:	81 e9       	ldi	r24, 0x91	; 145
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	0e 94 14 03 	call	0x628	; 0x628 <Lcd4_Write_String>
		Lcd4_Set_Cursor(2,1);
     6f6:	61 e0       	ldi	r22, 0x01	; 1
     6f8:	82 e0       	ldi	r24, 0x02	; 2
     6fa:	0e 94 7d 02 	call	0x4fa	; 0x4fa <Lcd4_Set_Cursor>
		Lcd4_Write_String(s2);	
     6fe:	83 eb       	ldi	r24, 0xB3	; 179
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	0e 94 14 03 	call	0x628	; 0x628 <Lcd4_Write_String>
		Lcd4_Set_Cursor(2,9);
     706:	69 e0       	ldi	r22, 0x09	; 9
     708:	82 e0       	ldi	r24, 0x02	; 2
     70a:	0e 94 7d 02 	call	0x4fa	; 0x4fa <Lcd4_Set_Cursor>
		Lcd4_Write_String(s3);	
     70e:	82 ed       	ldi	r24, 0xD2	; 210
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	0e 94 14 03 	call	0x628	; 0x628 <Lcd4_Write_String>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     716:	2f ef       	ldi	r18, 0xFF	; 255
     718:	89 e6       	ldi	r24, 0x69	; 105
     71a:	98 e1       	ldi	r25, 0x18	; 24
     71c:	21 50       	subi	r18, 0x01	; 1
     71e:	80 40       	sbci	r24, 0x00	; 0
     720:	90 40       	sbci	r25, 0x00	; 0
     722:	e1 f7       	brne	.-8      	; 0x71c <main+0xb4>
     724:	00 c0       	rjmp	.+0      	; 0x726 <main+0xbe>
     726:	00 00       	nop
		_delay_ms(500);
		if (!(value_1>250||value_2>250||value_3>250||value_1<0||value_2<0||value_3<0)) // if the values don't skip the plate ,use it
     728:	60 91 8f 00 	lds	r22, 0x008F	; 0x80008f <value_1>
     72c:	70 91 90 00 	lds	r23, 0x0090	; 0x800090 <value_1+0x1>
     730:	6b 3f       	cpi	r22, 0xFB	; 251
     732:	71 05       	cpc	r23, r1
     734:	84 f5       	brge	.+96     	; 0x796 <main+0x12e>
     736:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <value_2>
     73a:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <value_2+0x1>
     73e:	8b 3f       	cpi	r24, 0xFB	; 251
     740:	91 05       	cpc	r25, r1
     742:	48 f5       	brcc	.+82     	; 0x796 <main+0x12e>
     744:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <value_3>
     748:	90 91 b2 00 	lds	r25, 0x00B2	; 0x8000b2 <value_3+0x1>
     74c:	8b 3f       	cpi	r24, 0xFB	; 251
     74e:	91 05       	cpc	r25, r1
     750:	10 f5       	brcc	.+68     	; 0x796 <main+0x12e>
     752:	77 23       	and	r23, r23
     754:	04 f1       	brlt	.+64     	; 0x796 <main+0x12e>
		{
			
			step_1 = sub_function (&old_val_1, value_1);     //call function to extract first step
     756:	84 e6       	ldi	r24, 0x64	; 100
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	0e 94 c8 00 	call	0x190	; 0x190 <sub_function>
     75e:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <step_1+0x1>
     762:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <step_1>
			
			step_2 = sub_function (&old_val_2, value_2);    //call function to extract second step
     766:	60 91 80 00 	lds	r22, 0x0080	; 0x800080 <value_2>
     76a:	70 91 81 00 	lds	r23, 0x0081	; 0x800081 <value_2+0x1>
     76e:	82 e6       	ldi	r24, 0x62	; 98
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	0e 94 c8 00 	call	0x190	; 0x190 <sub_function>
     776:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <step_2+0x1>
     77a:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <step_2>
			
			step_3 = sub_function (&old_val_3, value_3);    //call function to extract third step
     77e:	60 91 b1 00 	lds	r22, 0x00B1	; 0x8000b1 <value_3>
     782:	70 91 b2 00 	lds	r23, 0x00B2	; 0x8000b2 <value_3+0x1>
     786:	80 e6       	ldi	r24, 0x60	; 96
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	0e 94 c8 00 	call	0x190	; 0x190 <sub_function>
     78e:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <step_3+0x1>
     792:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <step_3>
		}
		double x = step_1; // variable to store the received x axis
     796:	60 91 7c 00 	lds	r22, 0x007C	; 0x80007c <step_1>
     79a:	70 91 7d 00 	lds	r23, 0x007D	; 0x80007d <step_1+0x1>
     79e:	07 2e       	mov	r0, r23
     7a0:	00 0c       	add	r0, r0
     7a2:	88 0b       	sbc	r24, r24
     7a4:	99 0b       	sbc	r25, r25
     7a6:	0e 94 fa 07 	call	0xff4	; 0xff4 <__floatsisf>
     7aa:	16 2f       	mov	r17, r22
     7ac:	7c 83       	std	Y+4, r23	; 0x04
     7ae:	8b 83       	std	Y+3, r24	; 0x03
     7b0:	09 2f       	mov	r16, r25
		double y = step_2; // variable to store the received y axis
     7b2:	60 91 7e 00 	lds	r22, 0x007E	; 0x80007e <step_2>
     7b6:	70 91 7f 00 	lds	r23, 0x007F	; 0x80007f <step_2+0x1>
     7ba:	07 2e       	mov	r0, r23
     7bc:	00 0c       	add	r0, r0
     7be:	88 0b       	sbc	r24, r24
     7c0:	99 0b       	sbc	r25, r25
     7c2:	0e 94 fa 07 	call	0xff4	; 0xff4 <__floatsisf>
     7c6:	6b 01       	movw	r12, r22
     7c8:	7c 01       	movw	r14, r24
		double z = step_3; // variable to store the received z axis
     7ca:	60 91 af 00 	lds	r22, 0x00AF	; 0x8000af <step_3>
     7ce:	70 91 b0 00 	lds	r23, 0x00B0	; 0x8000b0 <step_3+0x1>
     7d2:	07 2e       	mov	r0, r23
     7d4:	00 0c       	add	r0, r0
     7d6:	88 0b       	sbc	r24, r24
     7d8:	99 0b       	sbc	r25, r25
     7da:	0e 94 fa 07 	call	0xff4	; 0xff4 <__floatsisf>
     7de:	36 2e       	mov	r3, r22
     7e0:	27 2e       	mov	r2, r23
     7e2:	89 83       	std	Y+1, r24	; 0x01
     7e4:	9a 83       	std	Y+2, r25	; 0x02
		double Y ; // variable to control the movement of x axis
		double Z ; // variable to control the movement of x axis
		
		/*-----------------------------------------------*/
		
		if (posx == 0)
     7e6:	80 90 6e 00 	lds	r8, 0x006E	; 0x80006e <posx>
     7ea:	90 90 6f 00 	lds	r9, 0x006F	; 0x80006f <posx+0x1>
     7ee:	a0 90 70 00 	lds	r10, 0x0070	; 0x800070 <posx+0x2>
     7f2:	b0 90 71 00 	lds	r11, 0x0071	; 0x800071 <posx+0x3>
     7f6:	20 e0       	ldi	r18, 0x00	; 0
     7f8:	30 e0       	ldi	r19, 0x00	; 0
     7fa:	a9 01       	movw	r20, r18
     7fc:	c5 01       	movw	r24, r10
     7fe:	b4 01       	movw	r22, r8
     800:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <__cmpsf2>
     804:	88 23       	and	r24, r24
     806:	59 f0       	breq	.+22     	; 0x81e <main+0x1b6>
		{
			X = x;
		}
		else
		{
			X = x - posx;
     808:	a5 01       	movw	r20, r10
     80a:	94 01       	movw	r18, r8
     80c:	61 2f       	mov	r22, r17
     80e:	7c 81       	ldd	r23, Y+4	; 0x04
     810:	8b 81       	ldd	r24, Y+3	; 0x03
     812:	90 2f       	mov	r25, r16
     814:	0e 94 86 07 	call	0xf0c	; 0xf0c <__subsf3>
     818:	4b 01       	movw	r8, r22
     81a:	5c 01       	movw	r10, r24
     81c:	04 c0       	rjmp	.+8      	; 0x826 <main+0x1be>
		
		/*-----------------------------------------------*/
		
		if (posx == 0)
		{
			X = x;
     81e:	81 2e       	mov	r8, r17
     820:	9c 80       	ldd	r9, Y+4	; 0x04
     822:	ab 80       	ldd	r10, Y+3	; 0x03
     824:	b0 2e       	mov	r11, r16
			X = x - posx;
		}
		
		/*-----------------------------------------------*/
		
		if (posy == 0)
     826:	40 90 6a 00 	lds	r4, 0x006A	; 0x80006a <posy>
     82a:	50 90 6b 00 	lds	r5, 0x006B	; 0x80006b <posy+0x1>
     82e:	60 90 6c 00 	lds	r6, 0x006C	; 0x80006c <posy+0x2>
     832:	70 90 6d 00 	lds	r7, 0x006D	; 0x80006d <posy+0x3>
     836:	20 e0       	ldi	r18, 0x00	; 0
     838:	30 e0       	ldi	r19, 0x00	; 0
     83a:	a9 01       	movw	r20, r18
     83c:	c3 01       	movw	r24, r6
     83e:	b2 01       	movw	r22, r4
     840:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <__cmpsf2>
     844:	88 23       	and	r24, r24
     846:	41 f0       	breq	.+16     	; 0x858 <main+0x1f0>
		{
			Y = y;
		}
		else
		{
			Y = y - posy;
     848:	a3 01       	movw	r20, r6
     84a:	92 01       	movw	r18, r4
     84c:	c7 01       	movw	r24, r14
     84e:	b6 01       	movw	r22, r12
     850:	0e 94 86 07 	call	0xf0c	; 0xf0c <__subsf3>
     854:	6b 01       	movw	r12, r22
     856:	7c 01       	movw	r14, r24
		}
		
		/*-----------------------------------------------*/
		
			if (posz == 0)
     858:	40 90 66 00 	lds	r4, 0x0066	; 0x800066 <posz>
     85c:	50 90 67 00 	lds	r5, 0x0067	; 0x800067 <posz+0x1>
     860:	60 90 68 00 	lds	r6, 0x0068	; 0x800068 <posz+0x2>
     864:	70 90 69 00 	lds	r7, 0x0069	; 0x800069 <posz+0x3>
     868:	20 e0       	ldi	r18, 0x00	; 0
     86a:	30 e0       	ldi	r19, 0x00	; 0
     86c:	a9 01       	movw	r20, r18
     86e:	c3 01       	movw	r24, r6
     870:	b2 01       	movw	r22, r4
     872:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <__cmpsf2>
     876:	88 23       	and	r24, r24
     878:	59 f0       	breq	.+22     	; 0x890 <main+0x228>
			{
				Z = z;
			}
			else
			{
				Z = z - posz;
     87a:	a3 01       	movw	r20, r6
     87c:	92 01       	movw	r18, r4
     87e:	63 2d       	mov	r22, r3
     880:	72 2d       	mov	r23, r2
     882:	89 81       	ldd	r24, Y+1	; 0x01
     884:	9a 81       	ldd	r25, Y+2	; 0x02
     886:	0e 94 86 07 	call	0xf0c	; 0xf0c <__subsf3>
     88a:	2b 01       	movw	r4, r22
     88c:	3c 01       	movw	r6, r24
     88e:	04 c0       	rjmp	.+8      	; 0x898 <main+0x230>
		
		/*-----------------------------------------------*/
		
			if (posz == 0)
			{
				Z = z;
     890:	43 2c       	mov	r4, r3
     892:	52 2c       	mov	r5, r2
     894:	69 80       	ldd	r6, Y+1	; 0x01
     896:	7a 80       	ldd	r7, Y+2	; 0x02
				Z = z - posz;
			}
		
		/*-----------------------------------------------*/
		
		if (X < 0 ){ // if the distance give a negative number make it positive and change the direction of motor rotation
     898:	20 e0       	ldi	r18, 0x00	; 0
     89a:	30 e0       	ldi	r19, 0x00	; 0
     89c:	a9 01       	movw	r20, r18
     89e:	c5 01       	movw	r24, r10
     8a0:	b4 01       	movw	r22, r8
     8a2:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <__cmpsf2>
     8a6:	88 23       	and	r24, r24
     8a8:	3c f4       	brge	.+14     	; 0x8b8 <main+0x250>
			X *=-1;
     8aa:	b7 fa       	bst	r11, 7
     8ac:	b0 94       	com	r11
     8ae:	b7 f8       	bld	r11, 7
     8b0:	b0 94       	com	r11
			statusx = 1;
     8b2:	81 e0       	ldi	r24, 0x01	; 1
     8b4:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <statusx>
		}
		if (Y < 0 ){
     8b8:	20 e0       	ldi	r18, 0x00	; 0
     8ba:	30 e0       	ldi	r19, 0x00	; 0
     8bc:	a9 01       	movw	r20, r18
     8be:	c7 01       	movw	r24, r14
     8c0:	b6 01       	movw	r22, r12
     8c2:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <__cmpsf2>
     8c6:	88 23       	and	r24, r24
     8c8:	3c f4       	brge	.+14     	; 0x8d8 <main+0x270>
			Y *=-1;
     8ca:	f7 fa       	bst	r15, 7
     8cc:	f0 94       	com	r15
     8ce:	f7 f8       	bld	r15, 7
     8d0:	f0 94       	com	r15
			statusy = 1;
     8d2:	81 e0       	ldi	r24, 0x01	; 1
     8d4:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <statusy>
		}
		if (Z < 0 ){
     8d8:	20 e0       	ldi	r18, 0x00	; 0
     8da:	30 e0       	ldi	r19, 0x00	; 0
     8dc:	a9 01       	movw	r20, r18
     8de:	c3 01       	movw	r24, r6
     8e0:	b2 01       	movw	r22, r4
     8e2:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <__cmpsf2>
     8e6:	88 23       	and	r24, r24
     8e8:	3c f4       	brge	.+14     	; 0x8f8 <main+0x290>
			Z *=-1;
     8ea:	77 fa       	bst	r7, 7
     8ec:	70 94       	com	r7
     8ee:	77 f8       	bld	r7, 7
     8f0:	70 94       	com	r7
			statusz = 1;
     8f2:	81 e0       	ldi	r24, 0x01	; 1
     8f4:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <statusz>
		}
		
		/*-----------------------------------------------*/

		while (X>=0) // go to the received position
     8f8:	20 e0       	ldi	r18, 0x00	; 0
     8fa:	30 e0       	ldi	r19, 0x00	; 0
     8fc:	a9 01       	movw	r20, r18
     8fe:	c5 01       	movw	r24, r10
     900:	b4 01       	movw	r22, r8
     902:	0e 94 aa 08 	call	0x1154	; 0x1154 <__gesf2>
     906:	88 23       	and	r24, r24
     908:	c4 f0       	brlt	.+48     	; 0x93a <main+0x2d2>
		{
			Stepper_A_rev(statusx,1);
     90a:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <statusx>
     90e:	61 e0       	ldi	r22, 0x01	; 1
     910:	70 e0       	ldi	r23, 0x00	; 0
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	0e 94 d1 06 	call	0xda2	; 0xda2 <Stepper_A_rev>
			X--;
     918:	20 e0       	ldi	r18, 0x00	; 0
     91a:	30 e0       	ldi	r19, 0x00	; 0
     91c:	40 e8       	ldi	r20, 0x80	; 128
     91e:	5f e3       	ldi	r21, 0x3F	; 63
     920:	c5 01       	movw	r24, r10
     922:	b4 01       	movw	r22, r8
     924:	0e 94 86 07 	call	0xf0c	; 0xf0c <__subsf3>
     928:	4b 01       	movw	r8, r22
     92a:	5c 01       	movw	r10, r24
			statusz = 1;
		}
		
		/*-----------------------------------------------*/

		while (X>=0) // go to the received position
     92c:	20 e0       	ldi	r18, 0x00	; 0
     92e:	30 e0       	ldi	r19, 0x00	; 0
     930:	a9 01       	movw	r20, r18
     932:	0e 94 aa 08 	call	0x1154	; 0x1154 <__gesf2>
     936:	88 23       	and	r24, r24
     938:	44 f7       	brge	.-48     	; 0x90a <main+0x2a2>
		{
			Stepper_A_rev(statusx,1);
			X--;
		}
		while (Y>=0)
     93a:	20 e0       	ldi	r18, 0x00	; 0
     93c:	30 e0       	ldi	r19, 0x00	; 0
     93e:	a9 01       	movw	r20, r18
     940:	c7 01       	movw	r24, r14
     942:	b6 01       	movw	r22, r12
     944:	0e 94 aa 08 	call	0x1154	; 0x1154 <__gesf2>
     948:	88 23       	and	r24, r24
     94a:	c4 f0       	brlt	.+48     	; 0x97c <main+0x314>
		{
			Stepper_B_rev(statusy,1);
     94c:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <statusy>
     950:	61 e0       	ldi	r22, 0x01	; 1
     952:	70 e0       	ldi	r23, 0x00	; 0
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	0e 94 00 07 	call	0xe00	; 0xe00 <Stepper_B_rev>
			Y--;
     95a:	20 e0       	ldi	r18, 0x00	; 0
     95c:	30 e0       	ldi	r19, 0x00	; 0
     95e:	40 e8       	ldi	r20, 0x80	; 128
     960:	5f e3       	ldi	r21, 0x3F	; 63
     962:	c7 01       	movw	r24, r14
     964:	b6 01       	movw	r22, r12
     966:	0e 94 86 07 	call	0xf0c	; 0xf0c <__subsf3>
     96a:	6b 01       	movw	r12, r22
     96c:	7c 01       	movw	r14, r24
		while (X>=0) // go to the received position
		{
			Stepper_A_rev(statusx,1);
			X--;
		}
		while (Y>=0)
     96e:	20 e0       	ldi	r18, 0x00	; 0
     970:	30 e0       	ldi	r19, 0x00	; 0
     972:	a9 01       	movw	r20, r18
     974:	0e 94 aa 08 	call	0x1154	; 0x1154 <__gesf2>
     978:	88 23       	and	r24, r24
     97a:	44 f7       	brge	.-48     	; 0x94c <main+0x2e4>
		{
			Stepper_B_rev(statusy,1);
			Y--;
		}
		while (Z>=0)
     97c:	20 e0       	ldi	r18, 0x00	; 0
     97e:	30 e0       	ldi	r19, 0x00	; 0
     980:	a9 01       	movw	r20, r18
     982:	c3 01       	movw	r24, r6
     984:	b2 01       	movw	r22, r4
     986:	0e 94 aa 08 	call	0x1154	; 0x1154 <__gesf2>
     98a:	88 23       	and	r24, r24
     98c:	c4 f0       	brlt	.+48     	; 0x9be <main+0x356>
		{
			Stepper_C_rev(statusz,1);
     98e:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <statusz>
     992:	61 e0       	ldi	r22, 0x01	; 1
     994:	70 e0       	ldi	r23, 0x00	; 0
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	0e 94 2f 07 	call	0xe5e	; 0xe5e <Stepper_C_rev>
			Z--;
     99c:	20 e0       	ldi	r18, 0x00	; 0
     99e:	30 e0       	ldi	r19, 0x00	; 0
     9a0:	40 e8       	ldi	r20, 0x80	; 128
     9a2:	5f e3       	ldi	r21, 0x3F	; 63
     9a4:	c3 01       	movw	r24, r6
     9a6:	b2 01       	movw	r22, r4
     9a8:	0e 94 86 07 	call	0xf0c	; 0xf0c <__subsf3>
     9ac:	2b 01       	movw	r4, r22
     9ae:	3c 01       	movw	r6, r24
		while (Y>=0)
		{
			Stepper_B_rev(statusy,1);
			Y--;
		}
		while (Z>=0)
     9b0:	20 e0       	ldi	r18, 0x00	; 0
     9b2:	30 e0       	ldi	r19, 0x00	; 0
     9b4:	a9 01       	movw	r20, r18
     9b6:	0e 94 aa 08 	call	0x1154	; 0x1154 <__gesf2>
     9ba:	88 23       	and	r24, r24
     9bc:	44 f7       	brge	.-48     	; 0x98e <main+0x326>
		{
			Stepper_C_rev(statusz,1);
			Z--;
		}
		posx = x;
     9be:	81 2f       	mov	r24, r17
     9c0:	9c 81       	ldd	r25, Y+4	; 0x04
     9c2:	ab 81       	ldd	r26, Y+3	; 0x03
     9c4:	b0 2f       	mov	r27, r16
     9c6:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <posx>
     9ca:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <posx+0x1>
     9ce:	a0 93 70 00 	sts	0x0070, r26	; 0x800070 <posx+0x2>
     9d2:	b0 93 71 00 	sts	0x0071, r27	; 0x800071 <posx+0x3>
		posy = y;
		posy = z;
     9d6:	83 2d       	mov	r24, r3
     9d8:	92 2d       	mov	r25, r2
     9da:	a9 81       	ldd	r26, Y+1	; 0x01
     9dc:	ba 81       	ldd	r27, Y+2	; 0x02
     9de:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <posy>
     9e2:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <posy+0x1>
     9e6:	a0 93 6c 00 	sts	0x006C, r26	; 0x80006c <posy+0x2>
     9ea:	b0 93 6d 00 	sts	0x006D, r27	; 0x80006d <posy+0x3>
		x = 0.0;
		y = 0.0;
		z = 0.0;


	}
     9ee:	44 ce       	rjmp	.-888    	; 0x678 <main+0x10>

000009f0 <STpinChange>:
	if(a & 1024)
	STpinChange(DIRD,1);
	else
	STpinChange(DIRD,0);
	
}
     9f0:	67 2b       	or	r22, r23
     9f2:	09 f0       	breq	.+2      	; 0x9f6 <STpinChange+0x6>
     9f4:	9f c0       	rjmp	.+318    	; 0xb34 <STpinChange+0x144>
     9f6:	00 97       	sbiw	r24, 0x00	; 0
     9f8:	11 f4       	brne	.+4      	; 0x9fe <STpinChange+0xe>
     9fa:	d8 98       	cbi	0x1b, 0	; 27
     9fc:	08 95       	ret
     9fe:	81 30       	cpi	r24, 0x01	; 1
     a00:	91 05       	cpc	r25, r1
     a02:	11 f4       	brne	.+4      	; 0xa08 <STpinChange+0x18>
     a04:	d9 98       	cbi	0x1b, 1	; 27
     a06:	08 95       	ret
     a08:	82 30       	cpi	r24, 0x02	; 2
     a0a:	91 05       	cpc	r25, r1
     a0c:	11 f4       	brne	.+4      	; 0xa12 <STpinChange+0x22>
     a0e:	da 98       	cbi	0x1b, 2	; 27
     a10:	08 95       	ret
     a12:	83 30       	cpi	r24, 0x03	; 3
     a14:	91 05       	cpc	r25, r1
     a16:	11 f4       	brne	.+4      	; 0xa1c <STpinChange+0x2c>
     a18:	db 98       	cbi	0x1b, 3	; 27
     a1a:	08 95       	ret
     a1c:	84 30       	cpi	r24, 0x04	; 4
     a1e:	91 05       	cpc	r25, r1
     a20:	11 f4       	brne	.+4      	; 0xa26 <STpinChange+0x36>
     a22:	dc 98       	cbi	0x1b, 4	; 27
     a24:	08 95       	ret
     a26:	85 30       	cpi	r24, 0x05	; 5
     a28:	91 05       	cpc	r25, r1
     a2a:	11 f4       	brne	.+4      	; 0xa30 <STpinChange+0x40>
     a2c:	dd 98       	cbi	0x1b, 5	; 27
     a2e:	08 95       	ret
     a30:	86 30       	cpi	r24, 0x06	; 6
     a32:	91 05       	cpc	r25, r1
     a34:	11 f4       	brne	.+4      	; 0xa3a <STpinChange+0x4a>
     a36:	de 98       	cbi	0x1b, 6	; 27
     a38:	08 95       	ret
     a3a:	87 30       	cpi	r24, 0x07	; 7
     a3c:	91 05       	cpc	r25, r1
     a3e:	11 f4       	brne	.+4      	; 0xa44 <STpinChange+0x54>
     a40:	df 98       	cbi	0x1b, 7	; 27
     a42:	08 95       	ret
     a44:	8a 30       	cpi	r24, 0x0A	; 10
     a46:	91 05       	cpc	r25, r1
     a48:	11 f4       	brne	.+4      	; 0xa4e <STpinChange+0x5e>
     a4a:	c0 98       	cbi	0x18, 0	; 24
     a4c:	08 95       	ret
     a4e:	8b 30       	cpi	r24, 0x0B	; 11
     a50:	91 05       	cpc	r25, r1
     a52:	11 f4       	brne	.+4      	; 0xa58 <STpinChange+0x68>
     a54:	c1 98       	cbi	0x18, 1	; 24
     a56:	08 95       	ret
     a58:	8c 30       	cpi	r24, 0x0C	; 12
     a5a:	91 05       	cpc	r25, r1
     a5c:	11 f4       	brne	.+4      	; 0xa62 <STpinChange+0x72>
     a5e:	c2 98       	cbi	0x18, 2	; 24
     a60:	08 95       	ret
     a62:	8d 30       	cpi	r24, 0x0D	; 13
     a64:	91 05       	cpc	r25, r1
     a66:	11 f4       	brne	.+4      	; 0xa6c <STpinChange+0x7c>
     a68:	c3 98       	cbi	0x18, 3	; 24
     a6a:	08 95       	ret
     a6c:	8e 30       	cpi	r24, 0x0E	; 14
     a6e:	91 05       	cpc	r25, r1
     a70:	11 f4       	brne	.+4      	; 0xa76 <STpinChange+0x86>
     a72:	c4 98       	cbi	0x18, 4	; 24
     a74:	08 95       	ret
     a76:	8f 30       	cpi	r24, 0x0F	; 15
     a78:	91 05       	cpc	r25, r1
     a7a:	11 f4       	brne	.+4      	; 0xa80 <STpinChange+0x90>
     a7c:	c5 98       	cbi	0x18, 5	; 24
     a7e:	08 95       	ret
     a80:	80 31       	cpi	r24, 0x10	; 16
     a82:	91 05       	cpc	r25, r1
     a84:	11 f4       	brne	.+4      	; 0xa8a <STpinChange+0x9a>
     a86:	c6 98       	cbi	0x18, 6	; 24
     a88:	08 95       	ret
     a8a:	81 31       	cpi	r24, 0x11	; 17
     a8c:	91 05       	cpc	r25, r1
     a8e:	11 f4       	brne	.+4      	; 0xa94 <STpinChange+0xa4>
     a90:	c7 98       	cbi	0x18, 7	; 24
     a92:	08 95       	ret
     a94:	84 31       	cpi	r24, 0x14	; 20
     a96:	91 05       	cpc	r25, r1
     a98:	11 f4       	brne	.+4      	; 0xa9e <STpinChange+0xae>
     a9a:	a8 98       	cbi	0x15, 0	; 21
     a9c:	08 95       	ret
     a9e:	85 31       	cpi	r24, 0x15	; 21
     aa0:	91 05       	cpc	r25, r1
     aa2:	11 f4       	brne	.+4      	; 0xaa8 <STpinChange+0xb8>
     aa4:	a9 98       	cbi	0x15, 1	; 21
     aa6:	08 95       	ret
     aa8:	86 31       	cpi	r24, 0x16	; 22
     aaa:	91 05       	cpc	r25, r1
     aac:	11 f4       	brne	.+4      	; 0xab2 <STpinChange+0xc2>
     aae:	aa 98       	cbi	0x15, 2	; 21
     ab0:	08 95       	ret
     ab2:	87 31       	cpi	r24, 0x17	; 23
     ab4:	91 05       	cpc	r25, r1
     ab6:	11 f4       	brne	.+4      	; 0xabc <STpinChange+0xcc>
     ab8:	ab 98       	cbi	0x15, 3	; 21
     aba:	08 95       	ret
     abc:	88 31       	cpi	r24, 0x18	; 24
     abe:	91 05       	cpc	r25, r1
     ac0:	11 f4       	brne	.+4      	; 0xac6 <STpinChange+0xd6>
     ac2:	ac 98       	cbi	0x15, 4	; 21
     ac4:	08 95       	ret
     ac6:	89 31       	cpi	r24, 0x19	; 25
     ac8:	91 05       	cpc	r25, r1
     aca:	11 f4       	brne	.+4      	; 0xad0 <STpinChange+0xe0>
     acc:	ad 98       	cbi	0x15, 5	; 21
     ace:	08 95       	ret
     ad0:	8a 31       	cpi	r24, 0x1A	; 26
     ad2:	91 05       	cpc	r25, r1
     ad4:	11 f4       	brne	.+4      	; 0xada <STpinChange+0xea>
     ad6:	ae 98       	cbi	0x15, 6	; 21
     ad8:	08 95       	ret
     ada:	8b 31       	cpi	r24, 0x1B	; 27
     adc:	91 05       	cpc	r25, r1
     ade:	11 f4       	brne	.+4      	; 0xae4 <STpinChange+0xf4>
     ae0:	af 98       	cbi	0x15, 7	; 21
     ae2:	08 95       	ret
     ae4:	8e 31       	cpi	r24, 0x1E	; 30
     ae6:	91 05       	cpc	r25, r1
     ae8:	11 f4       	brne	.+4      	; 0xaee <STpinChange+0xfe>
     aea:	90 98       	cbi	0x12, 0	; 18
     aec:	08 95       	ret
     aee:	8f 31       	cpi	r24, 0x1F	; 31
     af0:	91 05       	cpc	r25, r1
     af2:	11 f4       	brne	.+4      	; 0xaf8 <STpinChange+0x108>
     af4:	91 98       	cbi	0x12, 1	; 18
     af6:	08 95       	ret
     af8:	80 32       	cpi	r24, 0x20	; 32
     afa:	91 05       	cpc	r25, r1
     afc:	11 f4       	brne	.+4      	; 0xb02 <STpinChange+0x112>
     afe:	92 98       	cbi	0x12, 2	; 18
     b00:	08 95       	ret
     b02:	81 32       	cpi	r24, 0x21	; 33
     b04:	91 05       	cpc	r25, r1
     b06:	11 f4       	brne	.+4      	; 0xb0c <STpinChange+0x11c>
     b08:	93 98       	cbi	0x12, 3	; 18
     b0a:	08 95       	ret
     b0c:	82 32       	cpi	r24, 0x22	; 34
     b0e:	91 05       	cpc	r25, r1
     b10:	11 f4       	brne	.+4      	; 0xb16 <STpinChange+0x126>
     b12:	94 98       	cbi	0x12, 4	; 18
     b14:	08 95       	ret
     b16:	83 32       	cpi	r24, 0x23	; 35
     b18:	91 05       	cpc	r25, r1
     b1a:	11 f4       	brne	.+4      	; 0xb20 <STpinChange+0x130>
     b1c:	95 98       	cbi	0x12, 5	; 18
     b1e:	08 95       	ret
     b20:	84 32       	cpi	r24, 0x24	; 36
     b22:	91 05       	cpc	r25, r1
     b24:	11 f4       	brne	.+4      	; 0xb2a <STpinChange+0x13a>
     b26:	96 98       	cbi	0x12, 6	; 18
     b28:	08 95       	ret
     b2a:	85 97       	sbiw	r24, 0x25	; 37
     b2c:	09 f0       	breq	.+2      	; 0xb30 <STpinChange+0x140>
     b2e:	9f c0       	rjmp	.+318    	; 0xc6e <STpinChange+0x27e>
     b30:	97 98       	cbi	0x12, 7	; 18
     b32:	08 95       	ret
     b34:	00 97       	sbiw	r24, 0x00	; 0
     b36:	11 f4       	brne	.+4      	; 0xb3c <STpinChange+0x14c>
     b38:	d8 9a       	sbi	0x1b, 0	; 27
     b3a:	08 95       	ret
     b3c:	81 30       	cpi	r24, 0x01	; 1
     b3e:	91 05       	cpc	r25, r1
     b40:	11 f4       	brne	.+4      	; 0xb46 <STpinChange+0x156>
     b42:	d9 9a       	sbi	0x1b, 1	; 27
     b44:	08 95       	ret
     b46:	82 30       	cpi	r24, 0x02	; 2
     b48:	91 05       	cpc	r25, r1
     b4a:	11 f4       	brne	.+4      	; 0xb50 <STpinChange+0x160>
     b4c:	da 9a       	sbi	0x1b, 2	; 27
     b4e:	08 95       	ret
     b50:	83 30       	cpi	r24, 0x03	; 3
     b52:	91 05       	cpc	r25, r1
     b54:	11 f4       	brne	.+4      	; 0xb5a <STpinChange+0x16a>
     b56:	db 9a       	sbi	0x1b, 3	; 27
     b58:	08 95       	ret
     b5a:	84 30       	cpi	r24, 0x04	; 4
     b5c:	91 05       	cpc	r25, r1
     b5e:	11 f4       	brne	.+4      	; 0xb64 <STpinChange+0x174>
     b60:	dc 9a       	sbi	0x1b, 4	; 27
     b62:	08 95       	ret
     b64:	85 30       	cpi	r24, 0x05	; 5
     b66:	91 05       	cpc	r25, r1
     b68:	11 f4       	brne	.+4      	; 0xb6e <STpinChange+0x17e>
     b6a:	dd 9a       	sbi	0x1b, 5	; 27
     b6c:	08 95       	ret
     b6e:	86 30       	cpi	r24, 0x06	; 6
     b70:	91 05       	cpc	r25, r1
     b72:	11 f4       	brne	.+4      	; 0xb78 <STpinChange+0x188>
     b74:	de 9a       	sbi	0x1b, 6	; 27
     b76:	08 95       	ret
     b78:	87 30       	cpi	r24, 0x07	; 7
     b7a:	91 05       	cpc	r25, r1
     b7c:	11 f4       	brne	.+4      	; 0xb82 <STpinChange+0x192>
     b7e:	df 9a       	sbi	0x1b, 7	; 27
     b80:	08 95       	ret
     b82:	8a 30       	cpi	r24, 0x0A	; 10
     b84:	91 05       	cpc	r25, r1
     b86:	11 f4       	brne	.+4      	; 0xb8c <STpinChange+0x19c>
     b88:	c0 9a       	sbi	0x18, 0	; 24
     b8a:	08 95       	ret
     b8c:	8b 30       	cpi	r24, 0x0B	; 11
     b8e:	91 05       	cpc	r25, r1
     b90:	11 f4       	brne	.+4      	; 0xb96 <STpinChange+0x1a6>
     b92:	c1 9a       	sbi	0x18, 1	; 24
     b94:	08 95       	ret
     b96:	8c 30       	cpi	r24, 0x0C	; 12
     b98:	91 05       	cpc	r25, r1
     b9a:	11 f4       	brne	.+4      	; 0xba0 <STpinChange+0x1b0>
     b9c:	c2 9a       	sbi	0x18, 2	; 24
     b9e:	08 95       	ret
     ba0:	8d 30       	cpi	r24, 0x0D	; 13
     ba2:	91 05       	cpc	r25, r1
     ba4:	11 f4       	brne	.+4      	; 0xbaa <STpinChange+0x1ba>
     ba6:	c3 9a       	sbi	0x18, 3	; 24
     ba8:	08 95       	ret
     baa:	8e 30       	cpi	r24, 0x0E	; 14
     bac:	91 05       	cpc	r25, r1
     bae:	11 f4       	brne	.+4      	; 0xbb4 <STpinChange+0x1c4>
     bb0:	c4 9a       	sbi	0x18, 4	; 24
     bb2:	08 95       	ret
     bb4:	8f 30       	cpi	r24, 0x0F	; 15
     bb6:	91 05       	cpc	r25, r1
     bb8:	11 f4       	brne	.+4      	; 0xbbe <STpinChange+0x1ce>
     bba:	c5 9a       	sbi	0x18, 5	; 24
     bbc:	08 95       	ret
     bbe:	80 31       	cpi	r24, 0x10	; 16
     bc0:	91 05       	cpc	r25, r1
     bc2:	11 f4       	brne	.+4      	; 0xbc8 <STpinChange+0x1d8>
     bc4:	c6 9a       	sbi	0x18, 6	; 24
     bc6:	08 95       	ret
     bc8:	81 31       	cpi	r24, 0x11	; 17
     bca:	91 05       	cpc	r25, r1
     bcc:	11 f4       	brne	.+4      	; 0xbd2 <STpinChange+0x1e2>
     bce:	c7 9a       	sbi	0x18, 7	; 24
     bd0:	08 95       	ret
     bd2:	84 31       	cpi	r24, 0x14	; 20
     bd4:	91 05       	cpc	r25, r1
     bd6:	11 f4       	brne	.+4      	; 0xbdc <STpinChange+0x1ec>
     bd8:	a8 9a       	sbi	0x15, 0	; 21
     bda:	08 95       	ret
     bdc:	85 31       	cpi	r24, 0x15	; 21
     bde:	91 05       	cpc	r25, r1
     be0:	11 f4       	brne	.+4      	; 0xbe6 <STpinChange+0x1f6>
     be2:	a9 9a       	sbi	0x15, 1	; 21
     be4:	08 95       	ret
     be6:	86 31       	cpi	r24, 0x16	; 22
     be8:	91 05       	cpc	r25, r1
     bea:	11 f4       	brne	.+4      	; 0xbf0 <STpinChange+0x200>
     bec:	aa 9a       	sbi	0x15, 2	; 21
     bee:	08 95       	ret
     bf0:	87 31       	cpi	r24, 0x17	; 23
     bf2:	91 05       	cpc	r25, r1
     bf4:	11 f4       	brne	.+4      	; 0xbfa <STpinChange+0x20a>
     bf6:	ab 9a       	sbi	0x15, 3	; 21
     bf8:	08 95       	ret
     bfa:	88 31       	cpi	r24, 0x18	; 24
     bfc:	91 05       	cpc	r25, r1
     bfe:	11 f4       	brne	.+4      	; 0xc04 <STpinChange+0x214>
     c00:	ac 9a       	sbi	0x15, 4	; 21
     c02:	08 95       	ret
     c04:	89 31       	cpi	r24, 0x19	; 25
     c06:	91 05       	cpc	r25, r1
     c08:	11 f4       	brne	.+4      	; 0xc0e <STpinChange+0x21e>
     c0a:	ad 9a       	sbi	0x15, 5	; 21
     c0c:	08 95       	ret
     c0e:	8a 31       	cpi	r24, 0x1A	; 26
     c10:	91 05       	cpc	r25, r1
     c12:	11 f4       	brne	.+4      	; 0xc18 <STpinChange+0x228>
     c14:	ae 9a       	sbi	0x15, 6	; 21
     c16:	08 95       	ret
     c18:	8b 31       	cpi	r24, 0x1B	; 27
     c1a:	91 05       	cpc	r25, r1
     c1c:	11 f4       	brne	.+4      	; 0xc22 <STpinChange+0x232>
     c1e:	af 9a       	sbi	0x15, 7	; 21
     c20:	08 95       	ret
     c22:	8e 31       	cpi	r24, 0x1E	; 30
     c24:	91 05       	cpc	r25, r1
     c26:	11 f4       	brne	.+4      	; 0xc2c <STpinChange+0x23c>
     c28:	90 9a       	sbi	0x12, 0	; 18
     c2a:	08 95       	ret
     c2c:	8f 31       	cpi	r24, 0x1F	; 31
     c2e:	91 05       	cpc	r25, r1
     c30:	11 f4       	brne	.+4      	; 0xc36 <STpinChange+0x246>
     c32:	91 9a       	sbi	0x12, 1	; 18
     c34:	08 95       	ret
     c36:	80 32       	cpi	r24, 0x20	; 32
     c38:	91 05       	cpc	r25, r1
     c3a:	11 f4       	brne	.+4      	; 0xc40 <STpinChange+0x250>
     c3c:	92 9a       	sbi	0x12, 2	; 18
     c3e:	08 95       	ret
     c40:	81 32       	cpi	r24, 0x21	; 33
     c42:	91 05       	cpc	r25, r1
     c44:	11 f4       	brne	.+4      	; 0xc4a <STpinChange+0x25a>
     c46:	93 9a       	sbi	0x12, 3	; 18
     c48:	08 95       	ret
     c4a:	82 32       	cpi	r24, 0x22	; 34
     c4c:	91 05       	cpc	r25, r1
     c4e:	11 f4       	brne	.+4      	; 0xc54 <STpinChange+0x264>
     c50:	94 9a       	sbi	0x12, 4	; 18
     c52:	08 95       	ret
     c54:	83 32       	cpi	r24, 0x23	; 35
     c56:	91 05       	cpc	r25, r1
     c58:	11 f4       	brne	.+4      	; 0xc5e <STpinChange+0x26e>
     c5a:	95 9a       	sbi	0x12, 5	; 18
     c5c:	08 95       	ret
     c5e:	84 32       	cpi	r24, 0x24	; 36
     c60:	91 05       	cpc	r25, r1
     c62:	11 f4       	brne	.+4      	; 0xc68 <STpinChange+0x278>
     c64:	96 9a       	sbi	0x12, 6	; 18
     c66:	08 95       	ret
     c68:	85 97       	sbiw	r24, 0x25	; 37
     c6a:	09 f4       	brne	.+2      	; 0xc6e <STpinChange+0x27e>
     c6c:	97 9a       	sbi	0x12, 7	; 18
     c6e:	08 95       	ret

00000c70 <steper_1step>:

void steper_1step(){ // to make a full 1 step with 2 phase
	STpinChange(ms1,0);        // ms1 = 0,ms2 = 0,ms3 = 0 from a9488 data sheet
     c70:	60 e0       	ldi	r22, 0x00	; 0
     c72:	70 e0       	ldi	r23, 0x00	; 0
     c74:	84 e1       	ldi	r24, 0x14	; 20
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <STpinChange>
	STpinChange(ms2,0);
     c7c:	60 e0       	ldi	r22, 0x00	; 0
     c7e:	70 e0       	ldi	r23, 0x00	; 0
     c80:	85 e1       	ldi	r24, 0x15	; 21
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <STpinChange>
	STpinChange(ms3,0);
     c88:	60 e0       	ldi	r22, 0x00	; 0
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	86 e1       	ldi	r24, 0x16	; 22
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <STpinChange>
     c94:	08 95       	ret

00000c96 <steper_Hstep>:
}
void steper_Hstep(){// to make a half 1 step with 1-2 phase ms1 = 1,ms2 = 0,ms3 = 0 from a9488 data sheet
	STpinChange(ms1,1);
     c96:	61 e0       	ldi	r22, 0x01	; 1
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	84 e1       	ldi	r24, 0x14	; 20
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <STpinChange>
	STpinChange(ms2,0);
     ca2:	60 e0       	ldi	r22, 0x00	; 0
     ca4:	70 e0       	ldi	r23, 0x00	; 0
     ca6:	85 e1       	ldi	r24, 0x15	; 21
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <STpinChange>
	STpinChange(ms3,0);
     cae:	60 e0       	ldi	r22, 0x00	; 0
     cb0:	70 e0       	ldi	r23, 0x00	; 0
     cb2:	86 e1       	ldi	r24, 0x16	; 22
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <STpinChange>
     cba:	08 95       	ret

00000cbc <steper_Qstep>:
}
void steper_Qstep(){// to make a Quarter 1 step with w1-2 phase ms1 = 0,ms2 = 1,ms3 = 0 from a9488 data sheet
	STpinChange(ms1,0);
     cbc:	60 e0       	ldi	r22, 0x00	; 0
     cbe:	70 e0       	ldi	r23, 0x00	; 0
     cc0:	84 e1       	ldi	r24, 0x14	; 20
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <STpinChange>
	STpinChange(ms2,1);
     cc8:	61 e0       	ldi	r22, 0x01	; 1
     cca:	70 e0       	ldi	r23, 0x00	; 0
     ccc:	85 e1       	ldi	r24, 0x15	; 21
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <STpinChange>
	STpinChange(ms3,0);
     cd4:	60 e0       	ldi	r22, 0x00	; 0
     cd6:	70 e0       	ldi	r23, 0x00	; 0
     cd8:	86 e1       	ldi	r24, 0x16	; 22
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <STpinChange>
     ce0:	08 95       	ret

00000ce2 <steper_Estep>:
}
void steper_Estep(){// to make a Eighth 1 step with 2w1-2 phase ms1 = 1,ms2 = 1,ms3 = 0 from a9488 data sheet
	STpinChange(ms1,1);
     ce2:	61 e0       	ldi	r22, 0x01	; 1
     ce4:	70 e0       	ldi	r23, 0x00	; 0
     ce6:	84 e1       	ldi	r24, 0x14	; 20
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <STpinChange>
	STpinChange(ms2,1);
     cee:	61 e0       	ldi	r22, 0x01	; 1
     cf0:	70 e0       	ldi	r23, 0x00	; 0
     cf2:	85 e1       	ldi	r24, 0x15	; 21
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <STpinChange>
	STpinChange(ms3,0);
     cfa:	60 e0       	ldi	r22, 0x00	; 0
     cfc:	70 e0       	ldi	r23, 0x00	; 0
     cfe:	86 e1       	ldi	r24, 0x16	; 22
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <STpinChange>
     d06:	08 95       	ret

00000d08 <steper_Sstep>:
}
void steper_Sstep(){// to make a Sixteenth 1 step with 4w1-2 phase ms1 = 1,ms2 = 1,ms3 = 0 from a9488 data sheet
	STpinChange(ms1,1);
     d08:	61 e0       	ldi	r22, 0x01	; 1
     d0a:	70 e0       	ldi	r23, 0x00	; 0
     d0c:	84 e1       	ldi	r24, 0x14	; 20
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <STpinChange>
	STpinChange(ms2,1);
     d14:	61 e0       	ldi	r22, 0x01	; 1
     d16:	70 e0       	ldi	r23, 0x00	; 0
     d18:	85 e1       	ldi	r24, 0x15	; 21
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <STpinChange>
	STpinChange(ms3,1);
     d20:	61 e0       	ldi	r22, 0x01	; 1
     d22:	70 e0       	ldi	r23, 0x00	; 0
     d24:	86 e1       	ldi	r24, 0x16	; 22
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <STpinChange>
     d2c:	08 95       	ret

00000d2e <StepperInit>:
}
//library interface description
void StepperInit(int steps,int16_t sp)  //types of steps (1,2,6,8,16),speed of rotation in rpm
{
     d2e:	cf 93       	push	r28
     d30:	df 93       	push	r29
     d32:	eb 01       	movw	r28, r22
	switch (steps){
     d34:	86 30       	cpi	r24, 0x06	; 6
     d36:	91 05       	cpc	r25, r1
     d38:	99 f0       	breq	.+38     	; 0xd60 <StepperInit+0x32>
     d3a:	34 f4       	brge	.+12     	; 0xd48 <StepperInit+0x1a>
     d3c:	81 30       	cpi	r24, 0x01	; 1
     d3e:	91 05       	cpc	r25, r1
     d40:	49 f0       	breq	.+18     	; 0xd54 <StepperInit+0x26>
     d42:	02 97       	sbiw	r24, 0x02	; 2
     d44:	51 f0       	breq	.+20     	; 0xd5a <StepperInit+0x2c>
     d46:	14 c0       	rjmp	.+40     	; 0xd70 <StepperInit+0x42>
     d48:	88 30       	cpi	r24, 0x08	; 8
     d4a:	91 05       	cpc	r25, r1
     d4c:	61 f0       	breq	.+24     	; 0xd66 <StepperInit+0x38>
     d4e:	40 97       	sbiw	r24, 0x10	; 16
     d50:	69 f0       	breq	.+26     	; 0xd6c <StepperInit+0x3e>
     d52:	0e c0       	rjmp	.+28     	; 0xd70 <StepperInit+0x42>
		case 1:steper_1step();break;
     d54:	0e 94 38 06 	call	0xc70	; 0xc70 <steper_1step>
     d58:	0b c0       	rjmp	.+22     	; 0xd70 <StepperInit+0x42>
		case 2:steper_Hstep();break;
     d5a:	0e 94 4b 06 	call	0xc96	; 0xc96 <steper_Hstep>
     d5e:	08 c0       	rjmp	.+16     	; 0xd70 <StepperInit+0x42>
		case 6:steper_Qstep();break;
     d60:	0e 94 5e 06 	call	0xcbc	; 0xcbc <steper_Qstep>
     d64:	05 c0       	rjmp	.+10     	; 0xd70 <StepperInit+0x42>
		case 8:steper_Estep();break;
     d66:	0e 94 71 06 	call	0xce2	; 0xce2 <steper_Estep>
     d6a:	02 c0       	rjmp	.+4      	; 0xd70 <StepperInit+0x42>
		case 16:steper_Sstep();break;
     d6c:	0e 94 84 06 	call	0xd08	; 0xd08 <steper_Sstep>
	}
	speed = sp;
     d70:	d0 93 f2 00 	sts	0x00F2, r29	; 0x8000f2 <speed+0x1>
     d74:	c0 93 f1 00 	sts	0x00F1, r28	; 0x8000f1 <speed>
}
     d78:	df 91       	pop	r29
     d7a:	cf 91       	pop	r28
     d7c:	08 95       	ret

00000d7e <setspeed>:
void setspeed(int sp){
     d7e:	bc 01       	movw	r22, r24
	sp=(1000/sp);//1step = 1 mm 
     d80:	88 ee       	ldi	r24, 0xE8	; 232
     d82:	93 e0       	ldi	r25, 0x03	; 3
     d84:	0e 94 af 08 	call	0x115e	; 0x115e <__divmodhi4>
	while(sp > 0){
     d88:	16 16       	cp	r1, r22
     d8a:	17 06       	cpc	r1, r23
     d8c:	4c f4       	brge	.+18     	; 0xda0 <setspeed+0x22>
     d8e:	89 ef       	ldi	r24, 0xF9	; 249
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	01 97       	sbiw	r24, 0x01	; 1
     d94:	f1 f7       	brne	.-4      	; 0xd92 <setspeed+0x14>
     d96:	00 c0       	rjmp	.+0      	; 0xd98 <setspeed+0x1a>
     d98:	00 00       	nop
		_delay_ms(1);
		sp-=1;
     d9a:	61 50       	subi	r22, 0x01	; 1
     d9c:	71 09       	sbc	r23, r1
	}
	speed = sp;
}
void setspeed(int sp){
	sp=(1000/sp);//1step = 1 mm 
	while(sp > 0){
     d9e:	b9 f7       	brne	.-18     	; 0xd8e <setspeed+0x10>
     da0:	08 95       	ret

00000da2 <Stepper_A_rev>:
		_delay_ms(1);
		sp-=1;
	}
}
void Stepper_A_rev(bool clockw,uint8_t NuOfSteps){//rotate clockwise or ccw , number of steps for stepperA
     da2:	cf 93       	push	r28
     da4:	c6 2f       	mov	r28, r22
	if (clockw)
     da6:	88 23       	and	r24, r24
     da8:	39 f0       	breq	.+14     	; 0xdb8 <Stepper_A_rev+0x16>
	{
		STpinChange(DIRA,1);
     daa:	61 e0       	ldi	r22, 0x01	; 1
     dac:	70 e0       	ldi	r23, 0x00	; 0
     dae:	88 e1       	ldi	r24, 0x18	; 24
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <STpinChange>
     db6:	06 c0       	rjmp	.+12     	; 0xdc4 <Stepper_A_rev+0x22>
	}
	else
	{
		STpinChange(DIRA,0);
     db8:	60 e0       	ldi	r22, 0x00	; 0
     dba:	70 e0       	ldi	r23, 0x00	; 0
     dbc:	88 e1       	ldi	r24, 0x18	; 24
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <STpinChange>
	}
	
	while (NuOfSteps > 0)
     dc4:	cc 23       	and	r28, r28
     dc6:	d1 f0       	breq	.+52     	; 0xdfc <Stepper_A_rev+0x5a>
	{
		STpinChange(StepA,1);
     dc8:	61 e0       	ldi	r22, 0x01	; 1
     dca:	70 e0       	ldi	r23, 0x00	; 0
     dcc:	87 e1       	ldi	r24, 0x17	; 23
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <STpinChange>
     dd4:	89 ef       	ldi	r24, 0xF9	; 249
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	01 97       	sbiw	r24, 0x01	; 1
     dda:	f1 f7       	brne	.-4      	; 0xdd8 <Stepper_A_rev+0x36>
     ddc:	00 c0       	rjmp	.+0      	; 0xdde <Stepper_A_rev+0x3c>
     dde:	00 00       	nop
		_delay_ms(1); 
		STpinChange(StepA,0);
     de0:	60 e0       	ldi	r22, 0x00	; 0
     de2:	70 e0       	ldi	r23, 0x00	; 0
     de4:	87 e1       	ldi	r24, 0x17	; 23
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <STpinChange>
		setspeed(speed);
     dec:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <speed>
     df0:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <speed+0x1>
     df4:	0e 94 bf 06 	call	0xd7e	; 0xd7e <setspeed>
		NuOfSteps -= 1;
     df8:	c1 50       	subi	r28, 0x01	; 1
	else
	{
		STpinChange(DIRA,0);
	}
	
	while (NuOfSteps > 0)
     dfa:	31 f7       	brne	.-52     	; 0xdc8 <Stepper_A_rev+0x26>
		_delay_ms(1); 
		STpinChange(StepA,0);
		setspeed(speed);
		NuOfSteps -= 1;
	}
}
     dfc:	cf 91       	pop	r28
     dfe:	08 95       	ret

00000e00 <Stepper_B_rev>:
void Stepper_B_rev(bool clockw,uint8_t NuOfSteps){//rotate clockwise or ccw , number of steps for stepperB
     e00:	cf 93       	push	r28
     e02:	c6 2f       	mov	r28, r22
	if (clockw)
     e04:	88 23       	and	r24, r24
     e06:	39 f0       	breq	.+14     	; 0xe16 <Stepper_B_rev+0x16>
	{
		STpinChange(DIRB,1);
     e08:	61 e0       	ldi	r22, 0x01	; 1
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	8a e1       	ldi	r24, 0x1A	; 26
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <STpinChange>
     e14:	06 c0       	rjmp	.+12     	; 0xe22 <Stepper_B_rev+0x22>
	}
	else
	{
		STpinChange(DIRB,0);
     e16:	60 e0       	ldi	r22, 0x00	; 0
     e18:	70 e0       	ldi	r23, 0x00	; 0
     e1a:	8a e1       	ldi	r24, 0x1A	; 26
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <STpinChange>
	}
	
	while (NuOfSteps != 0)
     e22:	cc 23       	and	r28, r28
     e24:	d1 f0       	breq	.+52     	; 0xe5a <Stepper_B_rev+0x5a>
	{
		STpinChange(StepB,1);
     e26:	61 e0       	ldi	r22, 0x01	; 1
     e28:	70 e0       	ldi	r23, 0x00	; 0
     e2a:	89 e1       	ldi	r24, 0x19	; 25
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <STpinChange>
     e32:	89 ef       	ldi	r24, 0xF9	; 249
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	01 97       	sbiw	r24, 0x01	; 1
     e38:	f1 f7       	brne	.-4      	; 0xe36 <Stepper_B_rev+0x36>
     e3a:	00 c0       	rjmp	.+0      	; 0xe3c <Stepper_B_rev+0x3c>
     e3c:	00 00       	nop
		_delay_ms(1); //1Hz = 60 rpm & t = 1/f &1s = 1000ms
		STpinChange(StepB,0);
     e3e:	60 e0       	ldi	r22, 0x00	; 0
     e40:	70 e0       	ldi	r23, 0x00	; 0
     e42:	89 e1       	ldi	r24, 0x19	; 25
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <STpinChange>
		setspeed(speed);
     e4a:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <speed>
     e4e:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <speed+0x1>
     e52:	0e 94 bf 06 	call	0xd7e	; 0xd7e <setspeed>
		NuOfSteps -= 1;
     e56:	c1 50       	subi	r28, 0x01	; 1
	else
	{
		STpinChange(DIRB,0);
	}
	
	while (NuOfSteps != 0)
     e58:	31 f7       	brne	.-52     	; 0xe26 <Stepper_B_rev+0x26>
		_delay_ms(1); //1Hz = 60 rpm & t = 1/f &1s = 1000ms
		STpinChange(StepB,0);
		setspeed(speed);
		NuOfSteps -= 1;
	}
}
     e5a:	cf 91       	pop	r28
     e5c:	08 95       	ret

00000e5e <Stepper_C_rev>:
void Stepper_C_rev(bool clockw,uint8_t NuOfSteps){//rotate clockwise or ccw , number of steps for stepperC
     e5e:	cf 93       	push	r28
     e60:	c6 2f       	mov	r28, r22
	if (clockw)
     e62:	88 23       	and	r24, r24
     e64:	39 f0       	breq	.+14     	; 0xe74 <Stepper_C_rev+0x16>
	{
		STpinChange(DIRC,1);
     e66:	61 e0       	ldi	r22, 0x01	; 1
     e68:	70 e0       	ldi	r23, 0x00	; 0
     e6a:	8e e1       	ldi	r24, 0x1E	; 30
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <STpinChange>
     e72:	06 c0       	rjmp	.+12     	; 0xe80 <Stepper_C_rev+0x22>
	}
	else
	{
		STpinChange(DIRC,0);
     e74:	60 e0       	ldi	r22, 0x00	; 0
     e76:	70 e0       	ldi	r23, 0x00	; 0
     e78:	8e e1       	ldi	r24, 0x1E	; 30
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <STpinChange>
	}
	
	while (NuOfSteps != 0)
     e80:	cc 23       	and	r28, r28
     e82:	d1 f0       	breq	.+52     	; 0xeb8 <Stepper_C_rev+0x5a>
	{
		STpinChange(StepC,1);
     e84:	61 e0       	ldi	r22, 0x01	; 1
     e86:	70 e0       	ldi	r23, 0x00	; 0
     e88:	87 e0       	ldi	r24, 0x07	; 7
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <STpinChange>
     e90:	89 ef       	ldi	r24, 0xF9	; 249
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	01 97       	sbiw	r24, 0x01	; 1
     e96:	f1 f7       	brne	.-4      	; 0xe94 <Stepper_C_rev+0x36>
     e98:	00 c0       	rjmp	.+0      	; 0xe9a <Stepper_C_rev+0x3c>
     e9a:	00 00       	nop
		_delay_ms(1); //1Hz = 60 rpm & t = 1/f &1s = 1000ms
		STpinChange(StepC,0);
     e9c:	60 e0       	ldi	r22, 0x00	; 0
     e9e:	70 e0       	ldi	r23, 0x00	; 0
     ea0:	87 e0       	ldi	r24, 0x07	; 7
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <STpinChange>
		setspeed(speed);
     ea8:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <speed>
     eac:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <speed+0x1>
     eb0:	0e 94 bf 06 	call	0xd7e	; 0xd7e <setspeed>
		NuOfSteps -= 1;
     eb4:	c1 50       	subi	r28, 0x01	; 1
	else
	{
		STpinChange(DIRC,0);
	}
	
	while (NuOfSteps != 0)
     eb6:	31 f7       	brne	.-52     	; 0xe84 <Stepper_C_rev+0x26>
		_delay_ms(1); //1Hz = 60 rpm & t = 1/f &1s = 1000ms
		STpinChange(StepC,0);
		setspeed(speed);
		NuOfSteps -= 1;
	}
}
     eb8:	cf 91       	pop	r28
     eba:	08 95       	ret

00000ebc <UART_INIT>:
	for (k=0;k<7;k++)
	{
		Transmit_Char(String[k]);  //Send 6 characters.
		_delay_ms(100);
	}
}
     ebc:	83 e3       	ldi	r24, 0x33	; 51
     ebe:	89 b9       	out	0x09, r24	; 9
     ec0:	10 bc       	out	0x20, r1	; 32
     ec2:	88 e1       	ldi	r24, 0x18	; 24
     ec4:	8a b9       	out	0x0a, r24	; 10
     ec6:	86 e0       	ldi	r24, 0x06	; 6
     ec8:	80 bd       	out	0x20, r24	; 32
     eca:	08 95       	ret

00000ecc <Recive_Char>:
     ecc:	5f 9b       	sbis	0x0b, 7	; 11
     ece:	fe cf       	rjmp	.-4      	; 0xecc <Recive_Char>
     ed0:	8c b1       	in	r24, 0x0c	; 12
     ed2:	08 95       	ret

00000ed4 <Recive_Data>:
void Recive_Data()
{   
     ed4:	cf 93       	push	r28
     ed6:	df 93       	push	r29
	//int k;
	for  (k=0;k<7;k++)
     ed8:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <k+0x1>
     edc:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <k>
     ee0:	c0 e0       	ldi	r28, 0x00	; 0
     ee2:	d0 e0       	ldi	r29, 0x00	; 0
	{
		String [k] = Recive_Char();  //Store 6 characters.
     ee4:	0e 94 66 07 	call	0xecc	; 0xecc <Recive_Char>
     ee8:	cc 58       	subi	r28, 0x8C	; 140
     eea:	df 4f       	sbci	r29, 0xFF	; 255
     eec:	88 83       	st	Y, r24
	}
}
void Recive_Data()
{   
	//int k;
	for  (k=0;k<7;k++)
     eee:	c0 91 72 00 	lds	r28, 0x0072	; 0x800072 <k>
     ef2:	d0 91 73 00 	lds	r29, 0x0073	; 0x800073 <k+0x1>
     ef6:	21 96       	adiw	r28, 0x01	; 1
     ef8:	d0 93 73 00 	sts	0x0073, r29	; 0x800073 <k+0x1>
     efc:	c0 93 72 00 	sts	0x0072, r28	; 0x800072 <k>
     f00:	c7 30       	cpi	r28, 0x07	; 7
     f02:	d1 05       	cpc	r29, r1
     f04:	7c f3       	brlt	.-34     	; 0xee4 <Recive_Data+0x10>
	{
		String [k] = Recive_Char();  //Store 6 characters.
		
	}
	
}
     f06:	df 91       	pop	r29
     f08:	cf 91       	pop	r28
     f0a:	08 95       	ret

00000f0c <__subsf3>:
     f0c:	50 58       	subi	r21, 0x80	; 128

00000f0e <__addsf3>:
     f0e:	bb 27       	eor	r27, r27
     f10:	aa 27       	eor	r26, r26
     f12:	0e 94 9e 07 	call	0xf3c	; 0xf3c <__addsf3x>
     f16:	0c 94 70 08 	jmp	0x10e0	; 0x10e0 <__fp_round>
     f1a:	0e 94 62 08 	call	0x10c4	; 0x10c4 <__fp_pscA>
     f1e:	38 f0       	brcs	.+14     	; 0xf2e <__addsf3+0x20>
     f20:	0e 94 69 08 	call	0x10d2	; 0x10d2 <__fp_pscB>
     f24:	20 f0       	brcs	.+8      	; 0xf2e <__addsf3+0x20>
     f26:	39 f4       	brne	.+14     	; 0xf36 <__addsf3+0x28>
     f28:	9f 3f       	cpi	r25, 0xFF	; 255
     f2a:	19 f4       	brne	.+6      	; 0xf32 <__addsf3+0x24>
     f2c:	26 f4       	brtc	.+8      	; 0xf36 <__addsf3+0x28>
     f2e:	0c 94 5f 08 	jmp	0x10be	; 0x10be <__fp_nan>
     f32:	0e f4       	brtc	.+2      	; 0xf36 <__addsf3+0x28>
     f34:	e0 95       	com	r30
     f36:	e7 fb       	bst	r30, 7
     f38:	0c 94 59 08 	jmp	0x10b2	; 0x10b2 <__fp_inf>

00000f3c <__addsf3x>:
     f3c:	e9 2f       	mov	r30, r25
     f3e:	0e 94 81 08 	call	0x1102	; 0x1102 <__fp_split3>
     f42:	58 f3       	brcs	.-42     	; 0xf1a <__addsf3+0xc>
     f44:	ba 17       	cp	r27, r26
     f46:	62 07       	cpc	r22, r18
     f48:	73 07       	cpc	r23, r19
     f4a:	84 07       	cpc	r24, r20
     f4c:	95 07       	cpc	r25, r21
     f4e:	20 f0       	brcs	.+8      	; 0xf58 <__addsf3x+0x1c>
     f50:	79 f4       	brne	.+30     	; 0xf70 <__addsf3x+0x34>
     f52:	a6 f5       	brtc	.+104    	; 0xfbc <__addsf3x+0x80>
     f54:	0c 94 a3 08 	jmp	0x1146	; 0x1146 <__fp_zero>
     f58:	0e f4       	brtc	.+2      	; 0xf5c <__addsf3x+0x20>
     f5a:	e0 95       	com	r30
     f5c:	0b 2e       	mov	r0, r27
     f5e:	ba 2f       	mov	r27, r26
     f60:	a0 2d       	mov	r26, r0
     f62:	0b 01       	movw	r0, r22
     f64:	b9 01       	movw	r22, r18
     f66:	90 01       	movw	r18, r0
     f68:	0c 01       	movw	r0, r24
     f6a:	ca 01       	movw	r24, r20
     f6c:	a0 01       	movw	r20, r0
     f6e:	11 24       	eor	r1, r1
     f70:	ff 27       	eor	r31, r31
     f72:	59 1b       	sub	r21, r25
     f74:	99 f0       	breq	.+38     	; 0xf9c <__addsf3x+0x60>
     f76:	59 3f       	cpi	r21, 0xF9	; 249
     f78:	50 f4       	brcc	.+20     	; 0xf8e <__addsf3x+0x52>
     f7a:	50 3e       	cpi	r21, 0xE0	; 224
     f7c:	68 f1       	brcs	.+90     	; 0xfd8 <__addsf3x+0x9c>
     f7e:	1a 16       	cp	r1, r26
     f80:	f0 40       	sbci	r31, 0x00	; 0
     f82:	a2 2f       	mov	r26, r18
     f84:	23 2f       	mov	r18, r19
     f86:	34 2f       	mov	r19, r20
     f88:	44 27       	eor	r20, r20
     f8a:	58 5f       	subi	r21, 0xF8	; 248
     f8c:	f3 cf       	rjmp	.-26     	; 0xf74 <__addsf3x+0x38>
     f8e:	46 95       	lsr	r20
     f90:	37 95       	ror	r19
     f92:	27 95       	ror	r18
     f94:	a7 95       	ror	r26
     f96:	f0 40       	sbci	r31, 0x00	; 0
     f98:	53 95       	inc	r21
     f9a:	c9 f7       	brne	.-14     	; 0xf8e <__addsf3x+0x52>
     f9c:	7e f4       	brtc	.+30     	; 0xfbc <__addsf3x+0x80>
     f9e:	1f 16       	cp	r1, r31
     fa0:	ba 0b       	sbc	r27, r26
     fa2:	62 0b       	sbc	r22, r18
     fa4:	73 0b       	sbc	r23, r19
     fa6:	84 0b       	sbc	r24, r20
     fa8:	ba f0       	brmi	.+46     	; 0xfd8 <__addsf3x+0x9c>
     faa:	91 50       	subi	r25, 0x01	; 1
     fac:	a1 f0       	breq	.+40     	; 0xfd6 <__addsf3x+0x9a>
     fae:	ff 0f       	add	r31, r31
     fb0:	bb 1f       	adc	r27, r27
     fb2:	66 1f       	adc	r22, r22
     fb4:	77 1f       	adc	r23, r23
     fb6:	88 1f       	adc	r24, r24
     fb8:	c2 f7       	brpl	.-16     	; 0xfaa <__addsf3x+0x6e>
     fba:	0e c0       	rjmp	.+28     	; 0xfd8 <__addsf3x+0x9c>
     fbc:	ba 0f       	add	r27, r26
     fbe:	62 1f       	adc	r22, r18
     fc0:	73 1f       	adc	r23, r19
     fc2:	84 1f       	adc	r24, r20
     fc4:	48 f4       	brcc	.+18     	; 0xfd8 <__addsf3x+0x9c>
     fc6:	87 95       	ror	r24
     fc8:	77 95       	ror	r23
     fca:	67 95       	ror	r22
     fcc:	b7 95       	ror	r27
     fce:	f7 95       	ror	r31
     fd0:	9e 3f       	cpi	r25, 0xFE	; 254
     fd2:	08 f0       	brcs	.+2      	; 0xfd6 <__addsf3x+0x9a>
     fd4:	b0 cf       	rjmp	.-160    	; 0xf36 <__addsf3+0x28>
     fd6:	93 95       	inc	r25
     fd8:	88 0f       	add	r24, r24
     fda:	08 f0       	brcs	.+2      	; 0xfde <__addsf3x+0xa2>
     fdc:	99 27       	eor	r25, r25
     fde:	ee 0f       	add	r30, r30
     fe0:	97 95       	ror	r25
     fe2:	87 95       	ror	r24
     fe4:	08 95       	ret

00000fe6 <__cmpsf2>:
     fe6:	0e 94 35 08 	call	0x106a	; 0x106a <__fp_cmp>
     fea:	08 f4       	brcc	.+2      	; 0xfee <__cmpsf2+0x8>
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	08 95       	ret

00000ff0 <__floatunsisf>:
     ff0:	e8 94       	clt
     ff2:	09 c0       	rjmp	.+18     	; 0x1006 <__floatsisf+0x12>

00000ff4 <__floatsisf>:
     ff4:	97 fb       	bst	r25, 7
     ff6:	3e f4       	brtc	.+14     	; 0x1006 <__floatsisf+0x12>
     ff8:	90 95       	com	r25
     ffa:	80 95       	com	r24
     ffc:	70 95       	com	r23
     ffe:	61 95       	neg	r22
    1000:	7f 4f       	sbci	r23, 0xFF	; 255
    1002:	8f 4f       	sbci	r24, 0xFF	; 255
    1004:	9f 4f       	sbci	r25, 0xFF	; 255
    1006:	99 23       	and	r25, r25
    1008:	a9 f0       	breq	.+42     	; 0x1034 <__floatsisf+0x40>
    100a:	f9 2f       	mov	r31, r25
    100c:	96 e9       	ldi	r25, 0x96	; 150
    100e:	bb 27       	eor	r27, r27
    1010:	93 95       	inc	r25
    1012:	f6 95       	lsr	r31
    1014:	87 95       	ror	r24
    1016:	77 95       	ror	r23
    1018:	67 95       	ror	r22
    101a:	b7 95       	ror	r27
    101c:	f1 11       	cpse	r31, r1
    101e:	f8 cf       	rjmp	.-16     	; 0x1010 <__floatsisf+0x1c>
    1020:	fa f4       	brpl	.+62     	; 0x1060 <__floatsisf+0x6c>
    1022:	bb 0f       	add	r27, r27
    1024:	11 f4       	brne	.+4      	; 0x102a <__floatsisf+0x36>
    1026:	60 ff       	sbrs	r22, 0
    1028:	1b c0       	rjmp	.+54     	; 0x1060 <__floatsisf+0x6c>
    102a:	6f 5f       	subi	r22, 0xFF	; 255
    102c:	7f 4f       	sbci	r23, 0xFF	; 255
    102e:	8f 4f       	sbci	r24, 0xFF	; 255
    1030:	9f 4f       	sbci	r25, 0xFF	; 255
    1032:	16 c0       	rjmp	.+44     	; 0x1060 <__floatsisf+0x6c>
    1034:	88 23       	and	r24, r24
    1036:	11 f0       	breq	.+4      	; 0x103c <__floatsisf+0x48>
    1038:	96 e9       	ldi	r25, 0x96	; 150
    103a:	11 c0       	rjmp	.+34     	; 0x105e <__floatsisf+0x6a>
    103c:	77 23       	and	r23, r23
    103e:	21 f0       	breq	.+8      	; 0x1048 <__floatsisf+0x54>
    1040:	9e e8       	ldi	r25, 0x8E	; 142
    1042:	87 2f       	mov	r24, r23
    1044:	76 2f       	mov	r23, r22
    1046:	05 c0       	rjmp	.+10     	; 0x1052 <__floatsisf+0x5e>
    1048:	66 23       	and	r22, r22
    104a:	71 f0       	breq	.+28     	; 0x1068 <__floatsisf+0x74>
    104c:	96 e8       	ldi	r25, 0x86	; 134
    104e:	86 2f       	mov	r24, r22
    1050:	70 e0       	ldi	r23, 0x00	; 0
    1052:	60 e0       	ldi	r22, 0x00	; 0
    1054:	2a f0       	brmi	.+10     	; 0x1060 <__floatsisf+0x6c>
    1056:	9a 95       	dec	r25
    1058:	66 0f       	add	r22, r22
    105a:	77 1f       	adc	r23, r23
    105c:	88 1f       	adc	r24, r24
    105e:	da f7       	brpl	.-10     	; 0x1056 <__floatsisf+0x62>
    1060:	88 0f       	add	r24, r24
    1062:	96 95       	lsr	r25
    1064:	87 95       	ror	r24
    1066:	97 f9       	bld	r25, 7
    1068:	08 95       	ret

0000106a <__fp_cmp>:
    106a:	99 0f       	add	r25, r25
    106c:	00 08       	sbc	r0, r0
    106e:	55 0f       	add	r21, r21
    1070:	aa 0b       	sbc	r26, r26
    1072:	e0 e8       	ldi	r30, 0x80	; 128
    1074:	fe ef       	ldi	r31, 0xFE	; 254
    1076:	16 16       	cp	r1, r22
    1078:	17 06       	cpc	r1, r23
    107a:	e8 07       	cpc	r30, r24
    107c:	f9 07       	cpc	r31, r25
    107e:	c0 f0       	brcs	.+48     	; 0x10b0 <__fp_cmp+0x46>
    1080:	12 16       	cp	r1, r18
    1082:	13 06       	cpc	r1, r19
    1084:	e4 07       	cpc	r30, r20
    1086:	f5 07       	cpc	r31, r21
    1088:	98 f0       	brcs	.+38     	; 0x10b0 <__fp_cmp+0x46>
    108a:	62 1b       	sub	r22, r18
    108c:	73 0b       	sbc	r23, r19
    108e:	84 0b       	sbc	r24, r20
    1090:	95 0b       	sbc	r25, r21
    1092:	39 f4       	brne	.+14     	; 0x10a2 <__fp_cmp+0x38>
    1094:	0a 26       	eor	r0, r26
    1096:	61 f0       	breq	.+24     	; 0x10b0 <__fp_cmp+0x46>
    1098:	23 2b       	or	r18, r19
    109a:	24 2b       	or	r18, r20
    109c:	25 2b       	or	r18, r21
    109e:	21 f4       	brne	.+8      	; 0x10a8 <__fp_cmp+0x3e>
    10a0:	08 95       	ret
    10a2:	0a 26       	eor	r0, r26
    10a4:	09 f4       	brne	.+2      	; 0x10a8 <__fp_cmp+0x3e>
    10a6:	a1 40       	sbci	r26, 0x01	; 1
    10a8:	a6 95       	lsr	r26
    10aa:	8f ef       	ldi	r24, 0xFF	; 255
    10ac:	81 1d       	adc	r24, r1
    10ae:	81 1d       	adc	r24, r1
    10b0:	08 95       	ret

000010b2 <__fp_inf>:
    10b2:	97 f9       	bld	r25, 7
    10b4:	9f 67       	ori	r25, 0x7F	; 127
    10b6:	80 e8       	ldi	r24, 0x80	; 128
    10b8:	70 e0       	ldi	r23, 0x00	; 0
    10ba:	60 e0       	ldi	r22, 0x00	; 0
    10bc:	08 95       	ret

000010be <__fp_nan>:
    10be:	9f ef       	ldi	r25, 0xFF	; 255
    10c0:	80 ec       	ldi	r24, 0xC0	; 192
    10c2:	08 95       	ret

000010c4 <__fp_pscA>:
    10c4:	00 24       	eor	r0, r0
    10c6:	0a 94       	dec	r0
    10c8:	16 16       	cp	r1, r22
    10ca:	17 06       	cpc	r1, r23
    10cc:	18 06       	cpc	r1, r24
    10ce:	09 06       	cpc	r0, r25
    10d0:	08 95       	ret

000010d2 <__fp_pscB>:
    10d2:	00 24       	eor	r0, r0
    10d4:	0a 94       	dec	r0
    10d6:	12 16       	cp	r1, r18
    10d8:	13 06       	cpc	r1, r19
    10da:	14 06       	cpc	r1, r20
    10dc:	05 06       	cpc	r0, r21
    10de:	08 95       	ret

000010e0 <__fp_round>:
    10e0:	09 2e       	mov	r0, r25
    10e2:	03 94       	inc	r0
    10e4:	00 0c       	add	r0, r0
    10e6:	11 f4       	brne	.+4      	; 0x10ec <__fp_round+0xc>
    10e8:	88 23       	and	r24, r24
    10ea:	52 f0       	brmi	.+20     	; 0x1100 <__fp_round+0x20>
    10ec:	bb 0f       	add	r27, r27
    10ee:	40 f4       	brcc	.+16     	; 0x1100 <__fp_round+0x20>
    10f0:	bf 2b       	or	r27, r31
    10f2:	11 f4       	brne	.+4      	; 0x10f8 <__fp_round+0x18>
    10f4:	60 ff       	sbrs	r22, 0
    10f6:	04 c0       	rjmp	.+8      	; 0x1100 <__fp_round+0x20>
    10f8:	6f 5f       	subi	r22, 0xFF	; 255
    10fa:	7f 4f       	sbci	r23, 0xFF	; 255
    10fc:	8f 4f       	sbci	r24, 0xFF	; 255
    10fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1100:	08 95       	ret

00001102 <__fp_split3>:
    1102:	57 fd       	sbrc	r21, 7
    1104:	90 58       	subi	r25, 0x80	; 128
    1106:	44 0f       	add	r20, r20
    1108:	55 1f       	adc	r21, r21
    110a:	59 f0       	breq	.+22     	; 0x1122 <__fp_splitA+0x10>
    110c:	5f 3f       	cpi	r21, 0xFF	; 255
    110e:	71 f0       	breq	.+28     	; 0x112c <__fp_splitA+0x1a>
    1110:	47 95       	ror	r20

00001112 <__fp_splitA>:
    1112:	88 0f       	add	r24, r24
    1114:	97 fb       	bst	r25, 7
    1116:	99 1f       	adc	r25, r25
    1118:	61 f0       	breq	.+24     	; 0x1132 <__fp_splitA+0x20>
    111a:	9f 3f       	cpi	r25, 0xFF	; 255
    111c:	79 f0       	breq	.+30     	; 0x113c <__fp_splitA+0x2a>
    111e:	87 95       	ror	r24
    1120:	08 95       	ret
    1122:	12 16       	cp	r1, r18
    1124:	13 06       	cpc	r1, r19
    1126:	14 06       	cpc	r1, r20
    1128:	55 1f       	adc	r21, r21
    112a:	f2 cf       	rjmp	.-28     	; 0x1110 <__fp_split3+0xe>
    112c:	46 95       	lsr	r20
    112e:	f1 df       	rcall	.-30     	; 0x1112 <__fp_splitA>
    1130:	08 c0       	rjmp	.+16     	; 0x1142 <__fp_splitA+0x30>
    1132:	16 16       	cp	r1, r22
    1134:	17 06       	cpc	r1, r23
    1136:	18 06       	cpc	r1, r24
    1138:	99 1f       	adc	r25, r25
    113a:	f1 cf       	rjmp	.-30     	; 0x111e <__fp_splitA+0xc>
    113c:	86 95       	lsr	r24
    113e:	71 05       	cpc	r23, r1
    1140:	61 05       	cpc	r22, r1
    1142:	08 94       	sec
    1144:	08 95       	ret

00001146 <__fp_zero>:
    1146:	e8 94       	clt

00001148 <__fp_szero>:
    1148:	bb 27       	eor	r27, r27
    114a:	66 27       	eor	r22, r22
    114c:	77 27       	eor	r23, r23
    114e:	cb 01       	movw	r24, r22
    1150:	97 f9       	bld	r25, 7
    1152:	08 95       	ret

00001154 <__gesf2>:
    1154:	0e 94 35 08 	call	0x106a	; 0x106a <__fp_cmp>
    1158:	08 f4       	brcc	.+2      	; 0x115c <__gesf2+0x8>
    115a:	8f ef       	ldi	r24, 0xFF	; 255
    115c:	08 95       	ret

0000115e <__divmodhi4>:
    115e:	97 fb       	bst	r25, 7
    1160:	07 2e       	mov	r0, r23
    1162:	16 f4       	brtc	.+4      	; 0x1168 <__divmodhi4+0xa>
    1164:	00 94       	com	r0
    1166:	07 d0       	rcall	.+14     	; 0x1176 <__divmodhi4_neg1>
    1168:	77 fd       	sbrc	r23, 7
    116a:	09 d0       	rcall	.+18     	; 0x117e <__divmodhi4_neg2>
    116c:	0e 94 c3 08 	call	0x1186	; 0x1186 <__udivmodhi4>
    1170:	07 fc       	sbrc	r0, 7
    1172:	05 d0       	rcall	.+10     	; 0x117e <__divmodhi4_neg2>
    1174:	3e f4       	brtc	.+14     	; 0x1184 <__divmodhi4_exit>

00001176 <__divmodhi4_neg1>:
    1176:	90 95       	com	r25
    1178:	81 95       	neg	r24
    117a:	9f 4f       	sbci	r25, 0xFF	; 255
    117c:	08 95       	ret

0000117e <__divmodhi4_neg2>:
    117e:	70 95       	com	r23
    1180:	61 95       	neg	r22
    1182:	7f 4f       	sbci	r23, 0xFF	; 255

00001184 <__divmodhi4_exit>:
    1184:	08 95       	ret

00001186 <__udivmodhi4>:
    1186:	aa 1b       	sub	r26, r26
    1188:	bb 1b       	sub	r27, r27
    118a:	51 e1       	ldi	r21, 0x11	; 17
    118c:	07 c0       	rjmp	.+14     	; 0x119c <__udivmodhi4_ep>

0000118e <__udivmodhi4_loop>:
    118e:	aa 1f       	adc	r26, r26
    1190:	bb 1f       	adc	r27, r27
    1192:	a6 17       	cp	r26, r22
    1194:	b7 07       	cpc	r27, r23
    1196:	10 f0       	brcs	.+4      	; 0x119c <__udivmodhi4_ep>
    1198:	a6 1b       	sub	r26, r22
    119a:	b7 0b       	sbc	r27, r23

0000119c <__udivmodhi4_ep>:
    119c:	88 1f       	adc	r24, r24
    119e:	99 1f       	adc	r25, r25
    11a0:	5a 95       	dec	r21
    11a2:	a9 f7       	brne	.-22     	; 0x118e <__udivmodhi4_loop>
    11a4:	80 95       	com	r24
    11a6:	90 95       	com	r25
    11a8:	bc 01       	movw	r22, r24
    11aa:	cd 01       	movw	r24, r26
    11ac:	08 95       	ret

000011ae <atoi>:
    11ae:	fc 01       	movw	r30, r24
    11b0:	88 27       	eor	r24, r24
    11b2:	99 27       	eor	r25, r25
    11b4:	e8 94       	clt
    11b6:	21 91       	ld	r18, Z+
    11b8:	20 32       	cpi	r18, 0x20	; 32
    11ba:	e9 f3       	breq	.-6      	; 0x11b6 <atoi+0x8>
    11bc:	29 30       	cpi	r18, 0x09	; 9
    11be:	10 f0       	brcs	.+4      	; 0x11c4 <atoi+0x16>
    11c0:	2e 30       	cpi	r18, 0x0E	; 14
    11c2:	c8 f3       	brcs	.-14     	; 0x11b6 <atoi+0x8>
    11c4:	2b 32       	cpi	r18, 0x2B	; 43
    11c6:	41 f0       	breq	.+16     	; 0x11d8 <atoi+0x2a>
    11c8:	2d 32       	cpi	r18, 0x2D	; 45
    11ca:	39 f4       	brne	.+14     	; 0x11da <atoi+0x2c>
    11cc:	68 94       	set
    11ce:	04 c0       	rjmp	.+8      	; 0x11d8 <atoi+0x2a>
    11d0:	0e 94 00 09 	call	0x1200	; 0x1200 <__mulhi_const_10>
    11d4:	82 0f       	add	r24, r18
    11d6:	91 1d       	adc	r25, r1
    11d8:	21 91       	ld	r18, Z+
    11da:	20 53       	subi	r18, 0x30	; 48
    11dc:	2a 30       	cpi	r18, 0x0A	; 10
    11de:	c0 f3       	brcs	.-16     	; 0x11d0 <atoi+0x22>
    11e0:	1e f4       	brtc	.+6      	; 0x11e8 <atoi+0x3a>
    11e2:	90 95       	com	r25
    11e4:	81 95       	neg	r24
    11e6:	9f 4f       	sbci	r25, 0xFF	; 255
    11e8:	08 95       	ret

000011ea <__itoa_ncheck>:
    11ea:	bb 27       	eor	r27, r27
    11ec:	4a 30       	cpi	r20, 0x0A	; 10
    11ee:	31 f4       	brne	.+12     	; 0x11fc <__itoa_ncheck+0x12>
    11f0:	99 23       	and	r25, r25
    11f2:	22 f4       	brpl	.+8      	; 0x11fc <__itoa_ncheck+0x12>
    11f4:	bd e2       	ldi	r27, 0x2D	; 45
    11f6:	90 95       	com	r25
    11f8:	81 95       	neg	r24
    11fa:	9f 4f       	sbci	r25, 0xFF	; 255
    11fc:	0c 94 09 09 	jmp	0x1212	; 0x1212 <__utoa_common>

00001200 <__mulhi_const_10>:
    1200:	7a e0       	ldi	r23, 0x0A	; 10
    1202:	97 9f       	mul	r25, r23
    1204:	90 2d       	mov	r25, r0
    1206:	87 9f       	mul	r24, r23
    1208:	80 2d       	mov	r24, r0
    120a:	91 0d       	add	r25, r1
    120c:	11 24       	eor	r1, r1
    120e:	08 95       	ret

00001210 <__utoa_ncheck>:
    1210:	bb 27       	eor	r27, r27

00001212 <__utoa_common>:
    1212:	fb 01       	movw	r30, r22
    1214:	55 27       	eor	r21, r21
    1216:	aa 27       	eor	r26, r26
    1218:	88 0f       	add	r24, r24
    121a:	99 1f       	adc	r25, r25
    121c:	aa 1f       	adc	r26, r26
    121e:	a4 17       	cp	r26, r20
    1220:	10 f0       	brcs	.+4      	; 0x1226 <__utoa_common+0x14>
    1222:	a4 1b       	sub	r26, r20
    1224:	83 95       	inc	r24
    1226:	50 51       	subi	r21, 0x10	; 16
    1228:	b9 f7       	brne	.-18     	; 0x1218 <__utoa_common+0x6>
    122a:	a0 5d       	subi	r26, 0xD0	; 208
    122c:	aa 33       	cpi	r26, 0x3A	; 58
    122e:	08 f0       	brcs	.+2      	; 0x1232 <__utoa_common+0x20>
    1230:	a9 5d       	subi	r26, 0xD9	; 217
    1232:	a1 93       	st	Z+, r26
    1234:	00 97       	sbiw	r24, 0x00	; 0
    1236:	79 f7       	brne	.-34     	; 0x1216 <__utoa_common+0x4>
    1238:	b1 11       	cpse	r27, r1
    123a:	b1 93       	st	Z+, r27
    123c:	11 92       	st	Z+, r1
    123e:	cb 01       	movw	r24, r22
    1240:	0c 94 22 09 	jmp	0x1244	; 0x1244 <strrev>

00001244 <strrev>:
    1244:	dc 01       	movw	r26, r24
    1246:	fc 01       	movw	r30, r24
    1248:	67 2f       	mov	r22, r23
    124a:	71 91       	ld	r23, Z+
    124c:	77 23       	and	r23, r23
    124e:	e1 f7       	brne	.-8      	; 0x1248 <strrev+0x4>
    1250:	32 97       	sbiw	r30, 0x02	; 2
    1252:	04 c0       	rjmp	.+8      	; 0x125c <strrev+0x18>
    1254:	7c 91       	ld	r23, X
    1256:	6d 93       	st	X+, r22
    1258:	70 83       	st	Z, r23
    125a:	62 91       	ld	r22, -Z
    125c:	ae 17       	cp	r26, r30
    125e:	bf 07       	cpc	r27, r31
    1260:	c8 f3       	brcs	.-14     	; 0x1254 <strrev+0x10>
    1262:	08 95       	ret

00001264 <_exit>:
    1264:	f8 94       	cli

00001266 <__stop_program>:
    1266:	ff cf       	rjmp	.-2      	; 0x1266 <__stop_program>
